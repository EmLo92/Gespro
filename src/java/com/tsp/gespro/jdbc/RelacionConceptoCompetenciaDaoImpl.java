/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.jdbc;

import com.tsp.gespro.dao.*;
import com.tsp.gespro.factory.*;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class RelacionConceptoCompetenciaDaoImpl extends AbstractDAO implements RelacionConceptoCompetenciaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_RELACION, ID_CONCEPTO, ID_COMPETENCIA, NOMBRE_CONCEPTO_COMPETENCIA, DESCRIPCION, CANTIDAD, PRECIO, PRECIO_COMPRA, PRECIO_DOCENA, PRECIO_MAYOREO, PRECIO_ESPECIAL, PRECIO_MINIMO_VENTA, PRECIO_MEDIO_MAYOREO, MAX_MENUDEO, MIN_MEDIO_MAYOREO, MAX_MEDIO_MAYOREO, MIN_MAYOREO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_RELACION, ID_CONCEPTO, ID_COMPETENCIA, NOMBRE_CONCEPTO_COMPETENCIA, DESCRIPCION, CANTIDAD, PRECIO, PRECIO_COMPRA, PRECIO_DOCENA, PRECIO_MAYOREO, PRECIO_ESPECIAL, PRECIO_MINIMO_VENTA, PRECIO_MEDIO_MAYOREO, MAX_MENUDEO, MIN_MEDIO_MAYOREO, MAX_MEDIO_MAYOREO, MIN_MAYOREO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_RELACION = ?, ID_CONCEPTO = ?, ID_COMPETENCIA = ?, NOMBRE_CONCEPTO_COMPETENCIA = ?, DESCRIPCION = ?, CANTIDAD = ?, PRECIO = ?, PRECIO_COMPRA = ?, PRECIO_DOCENA = ?, PRECIO_MAYOREO = ?, PRECIO_ESPECIAL = ?, PRECIO_MINIMO_VENTA = ?, PRECIO_MEDIO_MAYOREO = ?, MAX_MENUDEO = ?, MIN_MEDIO_MAYOREO = ?, MAX_MEDIO_MAYOREO = ?, MIN_MAYOREO = ?, DESCUENTO_PORCENTAJE = ?, DESCUENTO_MONTO = ? WHERE ID_RELACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_RELACION = ?";

	/** 
	 * Index of column ID_RELACION
	 */
	protected static final int COLUMN_ID_RELACION = 1;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 2;

	/** 
	 * Index of column ID_COMPETENCIA
	 */
	protected static final int COLUMN_ID_COMPETENCIA = 3;

	/** 
	 * Index of column NOMBRE_CONCEPTO_COMPETENCIA
	 */
	protected static final int COLUMN_NOMBRE_CONCEPTO_COMPETENCIA = 4;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 5;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 6;

	/** 
	 * Index of column PRECIO
	 */
	protected static final int COLUMN_PRECIO = 7;

	/** 
	 * Index of column PRECIO_COMPRA
	 */
	protected static final int COLUMN_PRECIO_COMPRA = 8;

	/** 
	 * Index of column PRECIO_DOCENA
	 */
	protected static final int COLUMN_PRECIO_DOCENA = 9;

	/** 
	 * Index of column PRECIO_MAYOREO
	 */
	protected static final int COLUMN_PRECIO_MAYOREO = 10;

	/** 
	 * Index of column PRECIO_ESPECIAL
	 */
	protected static final int COLUMN_PRECIO_ESPECIAL = 11;

	/** 
	 * Index of column PRECIO_MINIMO_VENTA
	 */
	protected static final int COLUMN_PRECIO_MINIMO_VENTA = 12;

	/** 
	 * Index of column PRECIO_MEDIO_MAYOREO
	 */
	protected static final int COLUMN_PRECIO_MEDIO_MAYOREO = 13;

	/** 
	 * Index of column MAX_MENUDEO
	 */
	protected static final int COLUMN_MAX_MENUDEO = 14;

	/** 
	 * Index of column MIN_MEDIO_MAYOREO
	 */
	protected static final int COLUMN_MIN_MEDIO_MAYOREO = 15;

	/** 
	 * Index of column MAX_MEDIO_MAYOREO
	 */
	protected static final int COLUMN_MAX_MEDIO_MAYOREO = 16;

	/** 
	 * Index of column MIN_MAYOREO
	 */
	protected static final int COLUMN_MIN_MAYOREO = 17;

	/** 
	 * Index of column DESCUENTO_PORCENTAJE
	 */
	protected static final int COLUMN_DESCUENTO_PORCENTAJE = 18;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 19;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 19;

	/** 
	 * Index of primary-key column ID_RELACION
	 */
	protected static final int PK_COLUMN_ID_RELACION = 1;

	/** 
	 * Inserts a new row in the relacion_concepto_competencia table.
	 */
	public RelacionConceptoCompetenciaPk insert(RelacionConceptoCompetencia dto) throws RelacionConceptoCompetenciaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdRelacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_RELACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCompetenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPETENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreConceptoCompetenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_CONCEPTO_COMPETENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioCompraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_COMPRA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_DOCENA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MINIMO_VENTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MAX_MENUDEO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MIN_MEDIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MAX_MEDIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMinMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MIN_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdRelacionModified()) {
				stmt.setInt( index++, dto.getIdRelacion() );
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isIdCompetenciaModified()) {
				if (dto.isIdCompetenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCompetencia() );
				}
		
			}
		
			if (dto.isNombreConceptoCompetenciaModified()) {
				stmt.setString( index++, dto.getNombreConceptoCompetencia() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecio() );
				}
		
			}
		
			if (dto.isPrecioCompraModified()) {
				if (dto.isPrecioCompraNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecioCompra() );
				}
		
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (dto.isPrecioDocenaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioDocena() );
				}
		
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (dto.isPrecioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreo() );
				}
		
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (dto.isPrecioEspecialNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecial() );
				}
		
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (dto.isPrecioMinimoVentaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMinimoVenta() );
				}
		
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (dto.isPrecioMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (dto.isMaxMenudeoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMenudeo() );
				}
		
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (dto.isMinMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (dto.isMaxMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMedioMayoreo() );
				}
		
			}
		
			if (dto.isMinMayoreoModified()) {
				if (dto.isMinMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMayoreo() );
				}
		
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdRelacion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RelacionConceptoCompetenciaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the relacion_concepto_competencia table.
	 */
	public void update(RelacionConceptoCompetenciaPk pk, RelacionConceptoCompetencia dto) throws RelacionConceptoCompetenciaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdRelacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_RELACION=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdCompetenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPETENCIA=?" );
				modified=true;
			}
		
			if (dto.isNombreConceptoCompetenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_CONCEPTO_COMPETENCIA=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isPrecioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO=?" );
				modified=true;
			}
		
			if (dto.isPrecioCompraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_COMPRA=?" );
				modified=true;
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_DOCENA=?" );
				modified=true;
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL=?" );
				modified=true;
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MINIMO_VENTA=?" );
				modified=true;
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MAX_MENUDEO=?" );
				modified=true;
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MIN_MEDIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MAX_MEDIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isMinMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MIN_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_RELACION=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRelacionModified()) {
				stmt.setInt( index++, dto.getIdRelacion() );
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isIdCompetenciaModified()) {
				if (dto.isIdCompetenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCompetencia() );
				}
		
			}
		
			if (dto.isNombreConceptoCompetenciaModified()) {
				stmt.setString( index++, dto.getNombreConceptoCompetencia() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecio() );
				}
		
			}
		
			if (dto.isPrecioCompraModified()) {
				if (dto.isPrecioCompraNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecioCompra() );
				}
		
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (dto.isPrecioDocenaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioDocena() );
				}
		
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (dto.isPrecioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreo() );
				}
		
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (dto.isPrecioEspecialNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecial() );
				}
		
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (dto.isPrecioMinimoVentaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMinimoVenta() );
				}
		
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (dto.isPrecioMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (dto.isMaxMenudeoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMenudeo() );
				}
		
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (dto.isMinMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (dto.isMaxMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMedioMayoreo() );
				}
		
			}
		
			if (dto.isMinMayoreoModified()) {
				if (dto.isMinMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMayoreo() );
				}
		
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdRelacion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RelacionConceptoCompetenciaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the relacion_concepto_competencia table.
	 */
	public void delete(RelacionConceptoCompetenciaPk pk) throws RelacionConceptoCompetenciaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdRelacion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RelacionConceptoCompetenciaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the relacion_concepto_competencia table that matches the specified primary-key value.
	 */
	public RelacionConceptoCompetencia findByPrimaryKey(RelacionConceptoCompetenciaPk pk) throws RelacionConceptoCompetenciaDaoException
	{
		return findByPrimaryKey( pk.getIdRelacion() );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'ID_RELACION = :idRelacion'.
	 */
	public RelacionConceptoCompetencia findByPrimaryKey(int idRelacion) throws RelacionConceptoCompetenciaDaoException
	{
		RelacionConceptoCompetencia ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_RELACION = ?", new Object[] {  new Integer(idRelacion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria ''.
	 */
	public RelacionConceptoCompetencia[] findAll() throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_RELACION", null );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'ID_RELACION = :idRelacion'.
	 */
	public RelacionConceptoCompetencia[] findWhereIdRelacionEquals(int idRelacion) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_RELACION = ? ORDER BY ID_RELACION", new Object[] {  new Integer(idRelacion) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public RelacionConceptoCompetencia[] findWhereIdConceptoEquals(int idConcepto) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'ID_COMPETENCIA = :idCompetencia'.
	 */
	public RelacionConceptoCompetencia[] findWhereIdCompetenciaEquals(int idCompetencia) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPETENCIA = ? ORDER BY ID_COMPETENCIA", new Object[] {  new Integer(idCompetencia) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'NOMBRE_CONCEPTO_COMPETENCIA = :nombreConceptoCompetencia'.
	 */
	public RelacionConceptoCompetencia[] findWhereNombreConceptoCompetenciaEquals(String nombreConceptoCompetencia) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_CONCEPTO_COMPETENCIA = ? ORDER BY NOMBRE_CONCEPTO_COMPETENCIA", new Object[] { nombreConceptoCompetencia } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public RelacionConceptoCompetencia[] findWhereDescripcionEquals(String descripcion) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public RelacionConceptoCompetencia[] findWhereCantidadEquals(double cantidad) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Double(cantidad) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'PRECIO = :precio'.
	 */
	public RelacionConceptoCompetencia[] findWherePrecioEquals(float precio) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO = ? ORDER BY PRECIO", new Object[] {  new Float(precio) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'PRECIO_COMPRA = :precioCompra'.
	 */
	public RelacionConceptoCompetencia[] findWherePrecioCompraEquals(float precioCompra) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_COMPRA = ? ORDER BY PRECIO_COMPRA", new Object[] {  new Float(precioCompra) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'PRECIO_DOCENA = :precioDocena'.
	 */
	public RelacionConceptoCompetencia[] findWherePrecioDocenaEquals(double precioDocena) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_DOCENA = ? ORDER BY PRECIO_DOCENA", new Object[] {  new Double(precioDocena) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'PRECIO_MAYOREO = :precioMayoreo'.
	 */
	public RelacionConceptoCompetencia[] findWherePrecioMayoreoEquals(double precioMayoreo) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MAYOREO = ? ORDER BY PRECIO_MAYOREO", new Object[] {  new Double(precioMayoreo) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'PRECIO_ESPECIAL = :precioEspecial'.
	 */
	public RelacionConceptoCompetencia[] findWherePrecioEspecialEquals(double precioEspecial) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_ESPECIAL = ? ORDER BY PRECIO_ESPECIAL", new Object[] {  new Double(precioEspecial) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'PRECIO_MINIMO_VENTA = :precioMinimoVenta'.
	 */
	public RelacionConceptoCompetencia[] findWherePrecioMinimoVentaEquals(double precioMinimoVenta) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MINIMO_VENTA = ? ORDER BY PRECIO_MINIMO_VENTA", new Object[] {  new Double(precioMinimoVenta) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'PRECIO_MEDIO_MAYOREO = :precioMedioMayoreo'.
	 */
	public RelacionConceptoCompetencia[] findWherePrecioMedioMayoreoEquals(double precioMedioMayoreo) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MEDIO_MAYOREO = ? ORDER BY PRECIO_MEDIO_MAYOREO", new Object[] {  new Double(precioMedioMayoreo) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'MAX_MENUDEO = :maxMenudeo'.
	 */
	public RelacionConceptoCompetencia[] findWhereMaxMenudeoEquals(double maxMenudeo) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MAX_MENUDEO = ? ORDER BY MAX_MENUDEO", new Object[] {  new Double(maxMenudeo) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'MIN_MEDIO_MAYOREO = :minMedioMayoreo'.
	 */
	public RelacionConceptoCompetencia[] findWhereMinMedioMayoreoEquals(double minMedioMayoreo) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MIN_MEDIO_MAYOREO = ? ORDER BY MIN_MEDIO_MAYOREO", new Object[] {  new Double(minMedioMayoreo) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'MAX_MEDIO_MAYOREO = :maxMedioMayoreo'.
	 */
	public RelacionConceptoCompetencia[] findWhereMaxMedioMayoreoEquals(double maxMedioMayoreo) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MAX_MEDIO_MAYOREO = ? ORDER BY MAX_MEDIO_MAYOREO", new Object[] {  new Double(maxMedioMayoreo) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'MIN_MAYOREO = :minMayoreo'.
	 */
	public RelacionConceptoCompetencia[] findWhereMinMayoreoEquals(double minMayoreo) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MIN_MAYOREO = ? ORDER BY MIN_MAYOREO", new Object[] {  new Double(minMayoreo) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'DESCUENTO_PORCENTAJE = :descuentoPorcentaje'.
	 */
	public RelacionConceptoCompetencia[] findWhereDescuentoPorcentajeEquals(double descuentoPorcentaje) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_PORCENTAJE = ? ORDER BY DESCUENTO_PORCENTAJE", new Object[] {  new Double(descuentoPorcentaje) } );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public RelacionConceptoCompetencia[] findWhereDescuentoMontoEquals(double descuentoMonto) throws RelacionConceptoCompetenciaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Double(descuentoMonto) } );
	}

	/**
	 * Method 'RelacionConceptoCompetenciaDaoImpl'
	 * 
	 */
	public RelacionConceptoCompetenciaDaoImpl()
	{
	}

	/**
	 * Method 'RelacionConceptoCompetenciaDaoImpl'
	 * 
	 * @param userConn
	 */
	public RelacionConceptoCompetenciaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "relacion_concepto_competencia";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected RelacionConceptoCompetencia fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			RelacionConceptoCompetencia dto = new RelacionConceptoCompetencia();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected RelacionConceptoCompetencia[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			RelacionConceptoCompetencia dto = new RelacionConceptoCompetencia();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		RelacionConceptoCompetencia ret[] = new RelacionConceptoCompetencia[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(RelacionConceptoCompetencia dto, ResultSet rs) throws SQLException
	{
		dto.setIdRelacion( rs.getInt( COLUMN_ID_RELACION ) );
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		if (rs.wasNull()) {
			dto.setIdConceptoNull( true );
		}
		
		dto.setIdCompetencia( rs.getInt( COLUMN_ID_COMPETENCIA ) );
		if (rs.wasNull()) {
			dto.setIdCompetenciaNull( true );
		}
		
		dto.setNombreConceptoCompetencia( rs.getString( COLUMN_NOMBRE_CONCEPTO_COMPETENCIA ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setCantidad( rs.getDouble( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setPrecio( rs.getFloat( COLUMN_PRECIO ) );
		if (rs.wasNull()) {
			dto.setPrecioNull( true );
		}
		
		dto.setPrecioCompra( rs.getFloat( COLUMN_PRECIO_COMPRA ) );
		if (rs.wasNull()) {
			dto.setPrecioCompraNull( true );
		}
		
		dto.setPrecioDocena( rs.getDouble( COLUMN_PRECIO_DOCENA ) );
		if (rs.wasNull()) {
			dto.setPrecioDocenaNull( true );
		}
		
		dto.setPrecioMayoreo( rs.getDouble( COLUMN_PRECIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setPrecioMayoreoNull( true );
		}
		
		dto.setPrecioEspecial( rs.getDouble( COLUMN_PRECIO_ESPECIAL ) );
		if (rs.wasNull()) {
			dto.setPrecioEspecialNull( true );
		}
		
		dto.setPrecioMinimoVenta( rs.getDouble( COLUMN_PRECIO_MINIMO_VENTA ) );
		if (rs.wasNull()) {
			dto.setPrecioMinimoVentaNull( true );
		}
		
		dto.setPrecioMedioMayoreo( rs.getDouble( COLUMN_PRECIO_MEDIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setPrecioMedioMayoreoNull( true );
		}
		
		dto.setMaxMenudeo( rs.getDouble( COLUMN_MAX_MENUDEO ) );
		if (rs.wasNull()) {
			dto.setMaxMenudeoNull( true );
		}
		
		dto.setMinMedioMayoreo( rs.getDouble( COLUMN_MIN_MEDIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setMinMedioMayoreoNull( true );
		}
		
		dto.setMaxMedioMayoreo( rs.getDouble( COLUMN_MAX_MEDIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setMaxMedioMayoreoNull( true );
		}
		
		dto.setMinMayoreo( rs.getDouble( COLUMN_MIN_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setMinMayoreoNull( true );
		}
		
		dto.setDescuentoPorcentaje( rs.getDouble( COLUMN_DESCUENTO_PORCENTAJE ) );
		if (rs.wasNull()) {
			dto.setDescuentoPorcentajeNull( true );
		}
		
		dto.setDescuentoMonto( rs.getDouble( COLUMN_DESCUENTO_MONTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoMontoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(RelacionConceptoCompetencia dto)
	{
		dto.setIdRelacionModified( false );
		dto.setIdConceptoModified( false );
		dto.setIdCompetenciaModified( false );
		dto.setNombreConceptoCompetenciaModified( false );
		dto.setDescripcionModified( false );
		dto.setCantidadModified( false );
		dto.setPrecioModified( false );
		dto.setPrecioCompraModified( false );
		dto.setPrecioDocenaModified( false );
		dto.setPrecioMayoreoModified( false );
		dto.setPrecioEspecialModified( false );
		dto.setPrecioMinimoVentaModified( false );
		dto.setPrecioMedioMayoreoModified( false );
		dto.setMaxMenudeoModified( false );
		dto.setMinMedioMayoreoModified( false );
		dto.setMaxMedioMayoreoModified( false );
		dto.setMinMayoreoModified( false );
		dto.setDescuentoPorcentajeModified( false );
		dto.setDescuentoMontoModified( false );
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the specified arbitrary SQL statement
	 */
	public RelacionConceptoCompetencia[] findByDynamicSelect(String sql, Object[] sqlParams) throws RelacionConceptoCompetenciaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RelacionConceptoCompetenciaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the relacion_concepto_competencia table that match the specified arbitrary SQL statement
	 */
	public RelacionConceptoCompetencia[] findByDynamicWhere(String sql, Object[] sqlParams) throws RelacionConceptoCompetenciaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RelacionConceptoCompetenciaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
