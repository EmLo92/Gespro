/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.jdbc;

import com.tsp.gespro.dao.*;
import com.tsp.gespro.factory.*;
import java.util.Date;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmpresaDaoImpl extends AbstractDAO implements EmpresaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMPRESA, ID_EMPRESA_PADRE, ID_UBICACION_FISCAL, ID_TIPO_EMPRESA, ID_ESTATUS, RFC, RAZON_SOCIAL, NOMBRE_COMERCIAL, REGIMEN_FISCAL, COMPARTIR_CONCEPTOS_MATRIZ, LATITUD, LONGITUD, FECHA_REGISTRO, GIRO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMPRESA, ID_EMPRESA_PADRE, ID_UBICACION_FISCAL, ID_TIPO_EMPRESA, ID_ESTATUS, RFC, RAZON_SOCIAL, NOMBRE_COMERCIAL, REGIMEN_FISCAL, COMPARTIR_CONCEPTOS_MATRIZ, LATITUD, LONGITUD, FECHA_REGISTRO, GIRO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_EMPRESA = ?, ID_EMPRESA_PADRE = ?, ID_UBICACION_FISCAL = ?, ID_TIPO_EMPRESA = ?, ID_ESTATUS = ?, RFC = ?, RAZON_SOCIAL = ?, NOMBRE_COMERCIAL = ?, REGIMEN_FISCAL = ?, COMPARTIR_CONCEPTOS_MATRIZ = ?, LATITUD = ?, LONGITUD = ?, FECHA_REGISTRO = ?, GIRO = ? WHERE ID_EMPRESA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_EMPRESA = ?";

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 1;

	/** 
	 * Index of column ID_EMPRESA_PADRE
	 */
	protected static final int COLUMN_ID_EMPRESA_PADRE = 2;

	/** 
	 * Index of column ID_UBICACION_FISCAL
	 */
	protected static final int COLUMN_ID_UBICACION_FISCAL = 3;

	/** 
	 * Index of column ID_TIPO_EMPRESA
	 */
	protected static final int COLUMN_ID_TIPO_EMPRESA = 4;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 5;

	/** 
	 * Index of column RFC
	 */
	protected static final int COLUMN_RFC = 6;

	/** 
	 * Index of column RAZON_SOCIAL
	 */
	protected static final int COLUMN_RAZON_SOCIAL = 7;

	/** 
	 * Index of column NOMBRE_COMERCIAL
	 */
	protected static final int COLUMN_NOMBRE_COMERCIAL = 8;

	/** 
	 * Index of column REGIMEN_FISCAL
	 */
	protected static final int COLUMN_REGIMEN_FISCAL = 9;

	/** 
	 * Index of column COMPARTIR_CONCEPTOS_MATRIZ
	 */
	protected static final int COLUMN_COMPARTIR_CONCEPTOS_MATRIZ = 10;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 11;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 12;

	/** 
	 * Index of column FECHA_REGISTRO
	 */
	protected static final int COLUMN_FECHA_REGISTRO = 13;

	/** 
	 * Index of column GIRO
	 */
	protected static final int COLUMN_GIRO = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column ID_EMPRESA
	 */
	protected static final int PK_COLUMN_ID_EMPRESA = 1;

	/** 
	 * Inserts a new row in the empresa table.
	 */
	public EmpresaPk insert(Empresa dto) throws EmpresaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA_PADRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_UBICACION_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TIPO_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreComercialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_COMERCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRegimenFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REGIMEN_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMPARTIR_CONCEPTOS_MATRIZ" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGiroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "GIRO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (dto.isIdEmpresaPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresaPadre() );
				}
		
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				stmt.setInt( index++, dto.getIdUbicacionFiscal() );
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				stmt.setInt( index++, dto.getIdTipoEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isNombreComercialModified()) {
				stmt.setString( index++, dto.getNombreComercial() );
			}
		
			if (dto.isRegimenFiscalModified()) {
				stmt.setString( index++, dto.getRegimenFiscal() );
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (dto.isCompartirConceptosMatrizNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCompartirConceptosMatriz() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isFechaRegistroModified()) {
				stmt.setDate(index++, dto.getFechaRegistro()==null ? null : new java.sql.Date( dto.getFechaRegistro().getTime() ) );
			}
		
			if (dto.isGiroModified()) {
				stmt.setString( index++, dto.getGiro() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdEmpresa( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the empresa table.
	 */
	public void update(EmpresaPk pk, Empresa dto) throws EmpresaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA_PADRE=?" );
				modified=true;
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_UBICACION_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TIPO_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isRfcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC=?" );
				modified=true;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL=?" );
				modified=true;
			}
		
			if (dto.isNombreComercialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_COMERCIAL=?" );
				modified=true;
			}
		
			if (dto.isRegimenFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REGIMEN_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMPARTIR_CONCEPTOS_MATRIZ=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO=?" );
				modified=true;
			}
		
			if (dto.isGiroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "GIRO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMPRESA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (dto.isIdEmpresaPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresaPadre() );
				}
		
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				stmt.setInt( index++, dto.getIdUbicacionFiscal() );
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				stmt.setInt( index++, dto.getIdTipoEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isNombreComercialModified()) {
				stmt.setString( index++, dto.getNombreComercial() );
			}
		
			if (dto.isRegimenFiscalModified()) {
				stmt.setString( index++, dto.getRegimenFiscal() );
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (dto.isCompartirConceptosMatrizNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCompartirConceptosMatriz() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isFechaRegistroModified()) {
				stmt.setDate(index++, dto.getFechaRegistro()==null ? null : new java.sql.Date( dto.getFechaRegistro().getTime() ) );
			}
		
			if (dto.isGiroModified()) {
				stmt.setString( index++, dto.getGiro() );
			}
		
			stmt.setInt( index++, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the empresa table.
	 */
	public void delete(EmpresaPk pk) throws EmpresaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the empresa table that matches the specified primary-key value.
	 */
	public Empresa findByPrimaryKey(EmpresaPk pk) throws EmpresaDaoException
	{
		return findByPrimaryKey( pk.getIdEmpresa() );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empresa findByPrimaryKey(int idEmpresa) throws EmpresaDaoException
	{
		Empresa ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ?", new Object[] {  new Integer(idEmpresa) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria ''.
	 */
	public Empresa[] findAll() throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_EMPRESA", null );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA_PADRE = :idEmpresaPadre'.
	 */
	public Empresa[] findByEmpresa(int idEmpresaPadre) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA_PADRE = ?", new Object[] {  new Integer(idEmpresaPadre) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_UBICACION_FISCAL = :idUbicacionFiscal'.
	 */
	public Empresa[] findByUbicacion(int idUbicacionFiscal) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_UBICACION_FISCAL = ?", new Object[] {  new Integer(idUbicacionFiscal) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_TIPO_EMPRESA = :idTipoEmpresa'.
	 */
	public Empresa[] findByTipoEmpresa(int idTipoEmpresa) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_EMPRESA = ?", new Object[] {  new Integer(idTipoEmpresa) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Empresa[] findByEstatus(int idEstatus) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ?", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empresa[] findWhereIdEmpresaEquals(int idEmpresa) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA_PADRE = :idEmpresaPadre'.
	 */
	public Empresa[] findWhereIdEmpresaPadreEquals(int idEmpresaPadre) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA_PADRE = ? ORDER BY ID_EMPRESA_PADRE", new Object[] {  new Integer(idEmpresaPadre) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_UBICACION_FISCAL = :idUbicacionFiscal'.
	 */
	public Empresa[] findWhereIdUbicacionFiscalEquals(int idUbicacionFiscal) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_UBICACION_FISCAL = ? ORDER BY ID_UBICACION_FISCAL", new Object[] {  new Integer(idUbicacionFiscal) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_TIPO_EMPRESA = :idTipoEmpresa'.
	 */
	public Empresa[] findWhereIdTipoEmpresaEquals(int idTipoEmpresa) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_EMPRESA = ? ORDER BY ID_TIPO_EMPRESA", new Object[] {  new Integer(idTipoEmpresa) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Empresa[] findWhereIdEstatusEquals(int idEstatus) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'RFC = :rfc'.
	 */
	public Empresa[] findWhereRfcEquals(String rfc) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC = ? ORDER BY RFC", new Object[] { rfc } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'RAZON_SOCIAL = :razonSocial'.
	 */
	public Empresa[] findWhereRazonSocialEquals(String razonSocial) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RAZON_SOCIAL = ? ORDER BY RAZON_SOCIAL", new Object[] { razonSocial } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'NOMBRE_COMERCIAL = :nombreComercial'.
	 */
	public Empresa[] findWhereNombreComercialEquals(String nombreComercial) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_COMERCIAL = ? ORDER BY NOMBRE_COMERCIAL", new Object[] { nombreComercial } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'REGIMEN_FISCAL = :regimenFiscal'.
	 */
	public Empresa[] findWhereRegimenFiscalEquals(String regimenFiscal) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REGIMEN_FISCAL = ? ORDER BY REGIMEN_FISCAL", new Object[] { regimenFiscal } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'COMPARTIR_CONCEPTOS_MATRIZ = :compartirConceptosMatriz'.
	 */
	public Empresa[] findWhereCompartirConceptosMatrizEquals(int compartirConceptosMatriz) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPARTIR_CONCEPTOS_MATRIZ = ? ORDER BY COMPARTIR_CONCEPTOS_MATRIZ", new Object[] {  new Integer(compartirConceptosMatriz) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'LATITUD = :latitud'.
	 */
	public Empresa[] findWhereLatitudEquals(double latitud) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'LONGITUD = :longitud'.
	 */
	public Empresa[] findWhereLongitudEquals(double longitud) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'FECHA_REGISTRO = :fechaRegistro'.
	 */
	public Empresa[] findWhereFechaRegistroEquals(Date fechaRegistro) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_REGISTRO = ? ORDER BY FECHA_REGISTRO", new Object[] { fechaRegistro==null ? null : new java.sql.Date( fechaRegistro.getTime() ) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'GIRO = :giro'.
	 */
	public Empresa[] findWhereGiroEquals(String giro) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GIRO = ? ORDER BY GIRO", new Object[] { giro } );
	}

	/**
	 * Method 'EmpresaDaoImpl'
	 * 
	 */
	public EmpresaDaoImpl()
	{
	}

	/**
	 * Method 'EmpresaDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmpresaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "empresa";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Empresa fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Empresa dto = new Empresa();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Empresa[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Empresa dto = new Empresa();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Empresa ret[] = new Empresa[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Empresa dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEmpresaPadre( rs.getInt( COLUMN_ID_EMPRESA_PADRE ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaPadreNull( true );
		}
		
		dto.setIdUbicacionFiscal( rs.getInt( COLUMN_ID_UBICACION_FISCAL ) );
		dto.setIdTipoEmpresa( rs.getInt( COLUMN_ID_TIPO_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setRfc( rs.getString( COLUMN_RFC ) );
		dto.setRazonSocial( rs.getString( COLUMN_RAZON_SOCIAL ) );
		dto.setNombreComercial( rs.getString( COLUMN_NOMBRE_COMERCIAL ) );
		dto.setRegimenFiscal( rs.getString( COLUMN_REGIMEN_FISCAL ) );
		dto.setCompartirConceptosMatriz( rs.getInt( COLUMN_COMPARTIR_CONCEPTOS_MATRIZ ) );
		if (rs.wasNull()) {
			dto.setCompartirConceptosMatrizNull( true );
		}
		
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		if (rs.wasNull()) {
			dto.setLatitudNull( true );
		}
		
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		if (rs.wasNull()) {
			dto.setLongitudNull( true );
		}
		
		dto.setFechaRegistro( rs.getDate(COLUMN_FECHA_REGISTRO ) );
		dto.setGiro( rs.getString( COLUMN_GIRO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Empresa dto)
	{
		dto.setIdEmpresaModified( false );
		dto.setIdEmpresaPadreModified( false );
		dto.setIdUbicacionFiscalModified( false );
		dto.setIdTipoEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setRfcModified( false );
		dto.setRazonSocialModified( false );
		dto.setNombreComercialModified( false );
		dto.setRegimenFiscalModified( false );
		dto.setCompartirConceptosMatrizModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setFechaRegistroModified( false );
		dto.setGiroModified( false );
	}

	/** 
	 * Returns all rows from the empresa table that match the specified arbitrary SQL statement
	 */
	public Empresa[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpresaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the empresa table that match the specified arbitrary SQL statement
	 */
	public Empresa[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpresaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
