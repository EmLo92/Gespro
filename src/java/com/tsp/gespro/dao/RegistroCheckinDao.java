/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.dao;

import java.util.Date;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;

public interface RegistroCheckinDao
{
	/** 
	 * Inserts a new row in the registro_checkin table.
	 */
	public RegistroCheckinPk insert(RegistroCheckin dto) throws RegistroCheckinDaoException;

	/** 
	 * Updates a single row in the registro_checkin table.
	 */
	public void update(RegistroCheckinPk pk, RegistroCheckin dto) throws RegistroCheckinDaoException;

	/** 
	 * Deletes a single row in the registro_checkin table.
	 */
	public void delete(RegistroCheckinPk pk) throws RegistroCheckinDaoException;

	/** 
	 * Returns the rows from the registro_checkin table that matches the specified primary-key value.
	 */
	public RegistroCheckin findByPrimaryKey(RegistroCheckinPk pk) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'ID_CHECK = :idCheck'.
	 */
	public RegistroCheckin findByPrimaryKey(long idCheck) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria ''.
	 */
	public RegistroCheckin[] findAll() throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'ID_CHECK = :idCheck'.
	 */
	public RegistroCheckin[] findWhereIdCheckEquals(long idCheck) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public RegistroCheckin[] findWhereIdUsuarioEquals(int idUsuario) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public RegistroCheckin[] findWhereIdClienteEquals(int idCliente) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'FECHA_HORA = :fechaHora'.
	 */
	public RegistroCheckin[] findWhereFechaHoraEquals(Date fechaHora) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'ID_TIPO_CHECK = :idTipoCheck'.
	 */
	public RegistroCheckin[] findWhereIdTipoCheckEquals(int idTipoCheck) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'ID_DETALLE_CHECK = :idDetalleCheck'.
	 */
	public RegistroCheckin[] findWhereIdDetalleCheckEquals(int idDetalleCheck) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public RegistroCheckin[] findWhereComentariosEquals(String comentarios) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'LATITUD = :latitud'.
	 */
	public RegistroCheckin[] findWhereLatitudEquals(double latitud) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'LONGITUD = :longitud'.
	 */
	public RegistroCheckin[] findWhereLongitudEquals(double longitud) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public RegistroCheckin[] findWhereIdEstatusEquals(int idEstatus) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the criteria 'INCIDENCIA = :incidencia'.
	 */
	public RegistroCheckin[] findWhereIncidenciaEquals(int incidencia) throws RegistroCheckinDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the registro_checkin table that match the specified arbitrary SQL statement
	 */
	public RegistroCheckin[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegistroCheckinDaoException;

	/** 
	 * Returns all rows from the registro_checkin table that match the specified arbitrary SQL statement
	 */
	public RegistroCheckin[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegistroCheckinDaoException;

}
