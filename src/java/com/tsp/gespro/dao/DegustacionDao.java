/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.dao;

import java.util.Date;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;

public interface DegustacionDao
{
	/** 
	 * Inserts a new row in the degustacion table.
	 */
	public DegustacionPk insert(Degustacion dto) throws DegustacionDaoException;

	/** 
	 * Updates a single row in the degustacion table.
	 */
	public void update(DegustacionPk pk, Degustacion dto) throws DegustacionDaoException;

	/** 
	 * Deletes a single row in the degustacion table.
	 */
	public void delete(DegustacionPk pk) throws DegustacionDaoException;

	/** 
	 * Returns the rows from the degustacion table that matches the specified primary-key value.
	 */
	public Degustacion findByPrimaryKey(DegustacionPk pk) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_DEGUSTACION = :idDegustacion'.
	 */
	public Degustacion findByPrimaryKey(int idDegustacion) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria ''.
	 */
	public Degustacion[] findAll() throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_DEGUSTACION = :idDegustacion'.
	 */
	public Degustacion[] findWhereIdDegustacionEquals(int idDegustacion) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public Degustacion[] findWhereIdUsuarioEquals(int idUsuario) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Degustacion[] findWhereIdEmpresaEquals(int idEmpresa) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public Degustacion[] findWhereIdConceptoEquals(int idConcepto) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Degustacion[] findWhereIdClienteEquals(int idCliente) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_CHECK = :idCheck'.
	 */
	public Degustacion[] findWhereIdCheckEquals(int idCheck) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Degustacion[] findWhereIdEstatusEquals(int idEstatus) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public Degustacion[] findWhereCantidadEquals(double cantidad) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'CANTIDAD_CIERRE = :cantidadCierre'.
	 */
	public Degustacion[] findWhereCantidadCierreEquals(double cantidadCierre) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'COMENTARIOS_CIERRE = :comentariosCierre'.
	 */
	public Degustacion[] findWhereComentariosCierreEquals(String comentariosCierre) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'FECHA_APERTURA = :fechaApertura'.
	 */
	public Degustacion[] findWhereFechaAperturaEquals(Date fechaApertura) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'FECHA_CIERRE = :fechaCierre'.
	 */
	public Degustacion[] findWhereFechaCierreEquals(Date fechaCierre) throws DegustacionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the degustacion table that match the specified arbitrary SQL statement
	 */
	public Degustacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws DegustacionDaoException;

	/** 
	 * Returns all rows from the degustacion table that match the specified arbitrary SQL statement
	 */
	public Degustacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws DegustacionDaoException;

}
