/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.dao;

import java.util.Date;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;

public interface UsuariosDao
{
	/** 
	 * Inserts a new row in the usuarios table.
	 */
	public UsuariosPk insert(Usuarios dto) throws UsuariosDaoException;

	/** 
	 * Updates a single row in the usuarios table.
	 */
	public void update(UsuariosPk pk, Usuarios dto) throws UsuariosDaoException;

	/** 
	 * Deletes a single row in the usuarios table.
	 */
	public void delete(UsuariosPk pk) throws UsuariosDaoException;

	/** 
	 * Returns the rows from the usuarios table that matches the specified primary-key value.
	 */
	public Usuarios findByPrimaryKey(UsuariosPk pk) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_USUARIOS = :idUsuarios'.
	 */
	public Usuarios findByPrimaryKey(int idUsuarios) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria ''.
	 */
	public Usuarios[] findAll() throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_USUARIOS = :idUsuarios'.
	 */
	public Usuarios[] findWhereIdUsuariosEquals(int idUsuarios) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Usuarios[] findWhereIdEmpresaEquals(int idEmpresa) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_DATOS_USUARIO = :idDatosUsuario'.
	 */
	public Usuarios[] findWhereIdDatosUsuarioEquals(int idDatosUsuario) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Usuarios[] findWhereIdEstatusEquals(int idEstatus) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_ROLES = :idRoles'.
	 */
	public Usuarios[] findWhereIdRolesEquals(int idRoles) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_LDAP = :idLdap'.
	 */
	public Usuarios[] findWhereIdLdapEquals(int idLdap) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'USER_NAME = :userName'.
	 */
	public Usuarios[] findWhereUserNameEquals(String userName) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'FECHA_ALTA = :fechaAlta'.
	 */
	public Usuarios[] findWhereFechaAltaEquals(Date fechaAlta) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'FECHA_VIGENCIA = :fechaVigencia'.
	 */
	public Usuarios[] findWhereFechaVigenciaEquals(Date fechaVigencia) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'FECHA_ULTIMO_ACCESO = :fechaUltimoAcceso'.
	 */
	public Usuarios[] findWhereFechaUltimoAccesoEquals(Date fechaUltimoAcceso) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'INTENTOS = :intentos'.
	 */
	public Usuarios[] findWhereIntentosEquals(int intentos) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'CONTRATO = :contrato'.
	 */
	public Usuarios[] findWhereContratoEquals(int contrato) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'FECHA_CONTRATO = :fechaContrato'.
	 */
	public Usuarios[] findWhereFechaContratoEquals(Date fechaContrato) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'LOGIN = :login'.
	 */
	public Usuarios[] findWhereLoginEquals(short login) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'LATITUD = :latitud'.
	 */
	public Usuarios[] findWhereLatitudEquals(double latitud) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'LONGITUD = :longitud'.
	 */
	public Usuarios[] findWhereLongitudEquals(double longitud) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ULTIMA_UBICACION = :ultimaUbicacion'.
	 */
	public Usuarios[] findWhereUltimaUbicacionEquals(Date ultimaUbicacion) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_DISPOSITIVO = :idDispositivo'.
	 */
	public Usuarios[] findWhereIdDispositivoEquals(int idDispositivo) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'CLIENTES_CODIGO_BARRAS = :clientesCodigoBarras'.
	 */
	public Usuarios[] findWhereClientesCodigoBarrasEquals(int clientesCodigoBarras) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'PERMISO_VENTA_CREDITO = :permisoVentaCredito'.
	 */
	public Usuarios[] findWherePermisoVentaCreditoEquals(int permisoVentaCredito) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'TRABAJAR_FUERA_LINEA = :trabajarFueraLinea'.
	 */
	public Usuarios[] findWhereTrabajarFueraLineaEquals(int trabajarFueraLinea) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'DISTANCIA_OBLIGATORIO = :distanciaObligatorio'.
	 */
	public Usuarios[] findWhereDistanciaObligatorioEquals(double distanciaObligatorio) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'PRECIO_DE_COMPRA = :precioDeCompra'.
	 */
	public Usuarios[] findWherePrecioDeCompraEquals(int precioDeCompra) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'PERMISO_ACCIONES_CLIENTE = :permisoAccionesCliente'.
	 */
	public Usuarios[] findWherePermisoAccionesClienteEquals(int permisoAccionesCliente) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'NUM_EMPLEADO = :numEmpleado'.
	 */
	public Usuarios[] findWhereNumEmpleadoEquals(String numEmpleado) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_HORARIO_ASIGNADO = :idHorarioAsignado'.
	 */
	public Usuarios[] findWhereIdHorarioAsignadoEquals(int idHorarioAsignado) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'ID_ESTADO_EMPLEADO = :idEstadoEmpleado'.
	 */
	public Usuarios[] findWhereIdEstadoEmpleadoEquals(int idEstadoEmpleado) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the criteria 'MINUTOS_ESTATUS = :minutosEstatus'.
	 */
	public Usuarios[] findWhereMinutosEstatusEquals(int minutosEstatus) throws UsuariosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the usuarios table that match the specified arbitrary SQL statement
	 */
	public Usuarios[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsuariosDaoException;

	/** 
	 * Returns all rows from the usuarios table that match the specified arbitrary SQL statement
	 */
	public Usuarios[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsuariosDaoException;

}
