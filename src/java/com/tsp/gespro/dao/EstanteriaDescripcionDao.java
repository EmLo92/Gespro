/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.dao;

import java.util.Date;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;

public interface EstanteriaDescripcionDao
{
	/** 
	 * Inserts a new row in the estanteria_descripcion table.
	 */
	public EstanteriaDescripcionPk insert(EstanteriaDescripcion dto) throws EstanteriaDescripcionDaoException;

	/** 
	 * Updates a single row in the estanteria_descripcion table.
	 */
	public void update(EstanteriaDescripcionPk pk, EstanteriaDescripcion dto) throws EstanteriaDescripcionDaoException;

	/** 
	 * Deletes a single row in the estanteria_descripcion table.
	 */
	public void delete(EstanteriaDescripcionPk pk) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns the rows from the estanteria_descripcion table that matches the specified primary-key value.
	 */
	public EstanteriaDescripcion findByPrimaryKey(EstanteriaDescripcionPk pk) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'ID_DESCRIPCION = :idDescripcion'.
	 */
	public EstanteriaDescripcion findByPrimaryKey(int idDescripcion) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria ''.
	 */
	public EstanteriaDescripcion[] findAll() throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'ID_DESCRIPCION = :idDescripcion'.
	 */
	public EstanteriaDescripcion[] findWhereIdDescripcionEquals(int idDescripcion) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'ID_ESTANTERIA = :idEstanteria'.
	 */
	public EstanteriaDescripcion[] findWhereIdEstanteriaEquals(int idEstanteria) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'ID_COMPETENCIA = :idCompetencia'.
	 */
	public EstanteriaDescripcion[] findWhereIdCompetenciaEquals(int idCompetencia) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public EstanteriaDescripcion[] findWhereIdEstatusEquals(int idEstatus) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public EstanteriaDescripcion[] findWhereCantidadEquals(double cantidad) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'PRECIO = :precio'.
	 */
	public EstanteriaDescripcion[] findWherePrecioEquals(double precio) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'NOMBRE_EMBALAJE = :nombreEmbalaje'.
	 */
	public EstanteriaDescripcion[] findWhereNombreEmbalajeEquals(String nombreEmbalaje) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'FECHA_CADUCIDAD = :fechaCaducidad'.
	 */
	public EstanteriaDescripcion[] findWhereFechaCaducidadEquals(Date fechaCaducidad) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the criteria 'ID_RELACION_CONCEPTO_COMPETENCIA = :idRelacionConceptoCompetencia'.
	 */
	public EstanteriaDescripcion[] findWhereIdRelacionConceptoCompetenciaEquals(int idRelacionConceptoCompetencia) throws EstanteriaDescripcionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the specified arbitrary SQL statement
	 */
	public EstanteriaDescripcion[] findByDynamicSelect(String sql, Object[] sqlParams) throws EstanteriaDescripcionDaoException;

	/** 
	 * Returns all rows from the estanteria_descripcion table that match the specified arbitrary SQL statement
	 */
	public EstanteriaDescripcion[] findByDynamicWhere(String sql, Object[] sqlParams) throws EstanteriaDescripcionDaoException;

}
