/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.tsp.gespro.report;


import com.tsp.gespro.bo.*;
import com.tsp.gespro.dto.*;

import com.tsp.gespro.exceptions.DatosUsuarioDaoException;
import com.tsp.gespro.exceptions.EmpresaDaoException;
import com.tsp.gespro.exceptions.SgfensPedidoDaoException;
import com.tsp.gespro.jdbc.DatosUsuarioDaoImpl;
import com.tsp.gespro.jdbc.EmpresaDaoImpl;
import com.tsp.gespro.jdbc.SgfensPedidoDaoImpl;
import com.tsp.gespro.jdbc.SgfensPedidoProductoDaoImpl;
import com.tsp.gespro.util.DateManage;
import com.tsp.gespro.util.Encrypter;
import com.tsp.gespro.util.StringManage;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.NumberFormat;
import java.text.DecimalFormat;
import java.util.Date;

/**
 *
 * @author ISCesarMartinez  poseidon24@hotmail.com
 * @date 17-dic-2012 
 */
public class ReportBO {
    
    public static final int DATA_STRING = 1;
    public static final int DATA_INT = 2;
    public static final int DATA_DECIMAL = 3;
    public static final int DATA_DATE = 4;
    public static final int DATA_DATETIME = 5;
    public static final int DATA_BOOLEAN = 6;
    
    
    public static final int CUSTOM_REPORT = -1;
    public static final int USER_REPORT = 1;  
    
    public static final int PEDIDO_REPRESENTACION_IMPRESA = 24;
    
    private int tipoReporte = 0;
   
    private UsuarioBO usuarioBO = null;

    private Connection conn = null;
    
    //Flag para Indicar si al generar los reportes al final se genera una fila 
    // con totales de acuerdo al tipo de Campo específicado en el reporte
    private boolean totalDecimalFields = false;
    private boolean totalIntegerFields = false;

    public Connection getConn() {
        return conn;
    }

    public void setConn(Connection conn) {
        this.conn = conn;
    }
    
    public UsuarioBO getUsuarioBO() {
        return usuarioBO;
    }

    public void setUsuarioBO(UsuarioBO usuarioBO) {
        this.usuarioBO = usuarioBO;
    }

    public boolean isTotalDecimalFields() {
        return totalDecimalFields;
    }

    public void setTotalDecimalFields(boolean totalDecimalFields) {
        this.totalDecimalFields = totalDecimalFields;
    }

    public boolean isTotalIntegerFields() {
        return totalIntegerFields;
    }

    public void setTotalIntegerFields(boolean totalIntegerFields) {
        this.totalIntegerFields = totalIntegerFields;
    }
    
    public static String getTitle(int REPORT){
        String title = "Reporte";
        switch(REPORT){
            case USER_REPORT:
                title = "Reporte de Usuarios";
                break; 
            case PEDIDO_REPRESENTACION_IMPRESA:
                title = "PEDIDO";
                break;
        }
        
        return title;
    }
    
    /**
     * 
     * 
     * @return String realData
     */
    private String getRealData(HashMap hashField,String data){
        String realData = "";
        try {
            switch(Integer.parseInt(hashField.get("type").toString())){
                case DATA_BOOLEAN:
                    realData = "" + (data.equals("1")?"TRUE":"FALSE");
                    if(hashField.get("mask")!=null && !hashField.get("mask").toString().equals("")){
                        String[] mask = hashField.get("mask").toString().split("\\|");
                        if(realData.equals("TRUE"))
                            realData = mask[0];
                        else
                            realData = mask[1];
                    }
                    break;
                case DATA_DATE:
                    realData = "" + new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("yyyy-MM-dd").parse(data));
                    if(hashField.get("mask")!=null && !hashField.get("mask").toString().equals("")){
                        realData = "" + new SimpleDateFormat(hashField.get("mask").toString()).format(new SimpleDateFormat("yyyy-MM-dd").parse(data));
                    }
                    break;
                case DATA_DATETIME:
                    if (data!=null){
                        try{
                            realData = "" + new SimpleDateFormat("dd/MM/yyyy hh:mm:ss a").format(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse(data));
                            if(hashField.get("mask")!=null && !hashField.get("mask").toString().equals("")){
                                realData = "" + new SimpleDateFormat(hashField.get("mask").toString()).format(new SimpleDateFormat("yyyy-MM-dd").parse(data));
                            }
                        }catch(Exception ex){}
                    }
                    break;
                case DATA_DECIMAL:
                    //realData = "" + Float.parseFloat(data);
                    realData = "" + new BigDecimal(data).setScale(2, RoundingMode.HALF_UP);
                    break;
                case DATA_INT:
                    realData = "" + Integer.parseInt(data);
                    break;
                case DATA_STRING:
                    realData = data;
                    break;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return realData;
    }

    /**
     * Devuelve un hash con los datos para el encabezado del reporte
     * 
     * @param String field
     * @param String label
     * @param String fkTable
     * @param String fkField
     * @param String type
     * @param String mask
     * 
     * @return Hash<String,String>
     */
    public HashMap getDataInfo(String field, String label, String fkTable, String fkField, String type, String mask){

        HashMap<String,String> dataMap = new HashMap<String, String>();

        dataMap.put("field", field);
        dataMap.put("label", label);
        dataMap.put("fkTable", fkTable);
        dataMap.put("fkField", fkField);
        dataMap.put("type",type);
        dataMap.put("mask",mask);

        return dataMap;
    }
    
    /**
     * Devuelve un arreglo de hash con los encabezados del reporte
     * 
     * @param int REPORT
     * 
     * @return ArrayList<HashMap>
     */
    public ArrayList<HashMap> getFieldList(int REPORT){
        ArrayList<HashMap> fieldList = new ArrayList<HashMap>();
        switch(REPORT){
            case USER_REPORT:
                fieldList.add(getDataInfo("ID_USUARIOS","ID","","",""+DATA_INT,""));
                fieldList.add(getDataInfo("SUCURSAL","Sucursal","","",""+DATA_STRING,""));
                fieldList.add(getDataInfo("USER_NAME","Usuario","","",""+DATA_STRING,""));
                fieldList.add(getDataInfo("FK_ROL","Rol","","",""+DATA_STRING,""));
                fieldList.add(getDataInfo("FK_NOMBRE","Nombre","","",""+DATA_STRING,""));
                fieldList.add(getDataInfo("ID_ESTATUS","Estatus","","",""+DATA_BOOLEAN,"Activo|Inactivo"));
                break;            
        }
        return fieldList;
    }
    
    /**
     * Devuelve una lista con los valores del reporte seleccionado
     * 
     * @param int report - Tipo de reporte
     * @param String params - Parámetros de búsqueda
     * 
     * @return ArrayList<HashMap> - Arreglo de hash con los datos
     */
    public ArrayList<HashMap> getDataReport(int report, String params, String paramsExtra) throws Exception{
        tipoReporte = report;
        int idEmpresa = usuarioBO!=null?usuarioBO.getUser().getIdEmpresa():-1;
        String paramsDefault ="";
        ArrayList<HashMap> dataList = new ArrayList<HashMap>();
        switch(report){
            /*case USER_REPORT:
                if(params!=null && !params.equals(""))
                    dataList = this.getDataList(new UsuariosBO().findUsuarios(-1, idEmpresa, 0, 0, params));
                    //dataList = this.getDataList(new UsuariosDaoImpl().findByDynamicWhere(params, new Object[0]));
                else
                    dataList = this.getDataList(new UsuariosBO().findUsuarios(-1, idEmpresa, 0, 0, ""));
                    //dataList = this.getDataList(new UsuariosDaoImpl().findAll());
                break;*/
        }
        return dataList;
    }

    
    
}