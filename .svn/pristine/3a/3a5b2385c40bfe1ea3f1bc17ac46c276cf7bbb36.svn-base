/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.jdbc;

import com.tsp.gespro.dao.*;
import com.tsp.gespro.factory.*;
import java.util.Date;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DegustacionDaoImpl extends AbstractDAO implements DegustacionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_DEGUSTACION, ID_USUARIO, ID_EMPRESA, ID_CONCEPTO, ID_CLIENTE, ID_CHECK, ID_ESTATUS, CANTIDAD, CANTIDAD_CIERRE, COMENTARIOS_CIERRE, FECHA_APERTURA, FECHA_CIERRE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_DEGUSTACION, ID_USUARIO, ID_EMPRESA, ID_CONCEPTO, ID_CLIENTE, ID_CHECK, ID_ESTATUS, CANTIDAD, CANTIDAD_CIERRE, COMENTARIOS_CIERRE, FECHA_APERTURA, FECHA_CIERRE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_DEGUSTACION = ?, ID_USUARIO = ?, ID_EMPRESA = ?, ID_CONCEPTO = ?, ID_CLIENTE = ?, ID_CHECK = ?, ID_ESTATUS = ?, CANTIDAD = ?, CANTIDAD_CIERRE = ?, COMENTARIOS_CIERRE = ?, FECHA_APERTURA = ?, FECHA_CIERRE = ? WHERE ID_DEGUSTACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_DEGUSTACION = ?";

	/** 
	 * Index of column ID_DEGUSTACION
	 */
	protected static final int COLUMN_ID_DEGUSTACION = 1;

	/** 
	 * Index of column ID_USUARIO
	 */
	protected static final int COLUMN_ID_USUARIO = 2;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 3;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 4;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 5;

	/** 
	 * Index of column ID_CHECK
	 */
	protected static final int COLUMN_ID_CHECK = 6;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 7;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 8;

	/** 
	 * Index of column CANTIDAD_CIERRE
	 */
	protected static final int COLUMN_CANTIDAD_CIERRE = 9;

	/** 
	 * Index of column COMENTARIOS_CIERRE
	 */
	protected static final int COLUMN_COMENTARIOS_CIERRE = 10;

	/** 
	 * Index of column FECHA_APERTURA
	 */
	protected static final int COLUMN_FECHA_APERTURA = 11;

	/** 
	 * Index of column FECHA_CIERRE
	 */
	protected static final int COLUMN_FECHA_CIERRE = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID_DEGUSTACION
	 */
	protected static final int PK_COLUMN_ID_DEGUSTACION = 1;

	/** 
	 * Inserts a new row in the degustacion table.
	 */
	public DegustacionPk insert(Degustacion dto) throws DegustacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdDegustacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_DEGUSTACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCheckModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CHECK" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadCierreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD_CIERRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComentariosCierreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMENTARIOS_CIERRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaAperturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_APERTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaCierreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_CIERRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdDegustacionModified()) {
				stmt.setInt( index++, dto.getIdDegustacion() );
			}
		
			if (dto.isIdUsuarioModified()) {
				if (dto.isIdUsuarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuario() );
				}
		
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIdCheckModified()) {
				if (dto.isIdCheckNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCheck() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isCantidadCierreModified()) {
				if (dto.isCantidadCierreNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadCierre() );
				}
		
			}
		
			if (dto.isComentariosCierreModified()) {
				stmt.setString( index++, dto.getComentariosCierre() );
			}
		
			if (dto.isFechaAperturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaApertura()==null ? null : new java.sql.Timestamp( dto.getFechaApertura().getTime() ) );
			}
		
			if (dto.isFechaCierreModified()) {
				stmt.setTimestamp(index++, dto.getFechaCierre()==null ? null : new java.sql.Timestamp( dto.getFechaCierre().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdDegustacion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DegustacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the degustacion table.
	 */
	public void update(DegustacionPk pk, Degustacion dto) throws DegustacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdDegustacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_DEGUSTACION=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIdCheckModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CHECK=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isCantidadCierreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD_CIERRE=?" );
				modified=true;
			}
		
			if (dto.isComentariosCierreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMENTARIOS_CIERRE=?" );
				modified=true;
			}
		
			if (dto.isFechaAperturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_APERTURA=?" );
				modified=true;
			}
		
			if (dto.isFechaCierreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_CIERRE=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_DEGUSTACION=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdDegustacionModified()) {
				stmt.setInt( index++, dto.getIdDegustacion() );
			}
		
			if (dto.isIdUsuarioModified()) {
				if (dto.isIdUsuarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuario() );
				}
		
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIdCheckModified()) {
				if (dto.isIdCheckNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCheck() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isCantidadCierreModified()) {
				if (dto.isCantidadCierreNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadCierre() );
				}
		
			}
		
			if (dto.isComentariosCierreModified()) {
				stmt.setString( index++, dto.getComentariosCierre() );
			}
		
			if (dto.isFechaAperturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaApertura()==null ? null : new java.sql.Timestamp( dto.getFechaApertura().getTime() ) );
			}
		
			if (dto.isFechaCierreModified()) {
				stmt.setTimestamp(index++, dto.getFechaCierre()==null ? null : new java.sql.Timestamp( dto.getFechaCierre().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getIdDegustacion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DegustacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the degustacion table.
	 */
	public void delete(DegustacionPk pk) throws DegustacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdDegustacion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DegustacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the degustacion table that matches the specified primary-key value.
	 */
	public Degustacion findByPrimaryKey(DegustacionPk pk) throws DegustacionDaoException
	{
		return findByPrimaryKey( pk.getIdDegustacion() );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_DEGUSTACION = :idDegustacion'.
	 */
	public Degustacion findByPrimaryKey(int idDegustacion) throws DegustacionDaoException
	{
		Degustacion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_DEGUSTACION = ?", new Object[] {  new Integer(idDegustacion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria ''.
	 */
	public Degustacion[] findAll() throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_DEGUSTACION", null );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_DEGUSTACION = :idDegustacion'.
	 */
	public Degustacion[] findWhereIdDegustacionEquals(int idDegustacion) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DEGUSTACION = ? ORDER BY ID_DEGUSTACION", new Object[] {  new Integer(idDegustacion) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public Degustacion[] findWhereIdUsuarioEquals(int idUsuario) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO = ? ORDER BY ID_USUARIO", new Object[] {  new Integer(idUsuario) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Degustacion[] findWhereIdEmpresaEquals(int idEmpresa) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public Degustacion[] findWhereIdConceptoEquals(int idConcepto) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Degustacion[] findWhereIdClienteEquals(int idCliente) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_CHECK = :idCheck'.
	 */
	public Degustacion[] findWhereIdCheckEquals(int idCheck) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CHECK = ? ORDER BY ID_CHECK", new Object[] {  new Integer(idCheck) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Degustacion[] findWhereIdEstatusEquals(int idEstatus) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public Degustacion[] findWhereCantidadEquals(double cantidad) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Double(cantidad) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'CANTIDAD_CIERRE = :cantidadCierre'.
	 */
	public Degustacion[] findWhereCantidadCierreEquals(double cantidadCierre) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD_CIERRE = ? ORDER BY CANTIDAD_CIERRE", new Object[] {  new Double(cantidadCierre) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'COMENTARIOS_CIERRE = :comentariosCierre'.
	 */
	public Degustacion[] findWhereComentariosCierreEquals(String comentariosCierre) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS_CIERRE = ? ORDER BY COMENTARIOS_CIERRE", new Object[] { comentariosCierre } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'FECHA_APERTURA = :fechaApertura'.
	 */
	public Degustacion[] findWhereFechaAperturaEquals(Date fechaApertura) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_APERTURA = ? ORDER BY FECHA_APERTURA", new Object[] { fechaApertura==null ? null : new java.sql.Timestamp( fechaApertura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the degustacion table that match the criteria 'FECHA_CIERRE = :fechaCierre'.
	 */
	public Degustacion[] findWhereFechaCierreEquals(Date fechaCierre) throws DegustacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_CIERRE = ? ORDER BY FECHA_CIERRE", new Object[] { fechaCierre==null ? null : new java.sql.Timestamp( fechaCierre.getTime() ) } );
	}

	/**
	 * Method 'DegustacionDaoImpl'
	 * 
	 */
	public DegustacionDaoImpl()
	{
	}

	/**
	 * Method 'DegustacionDaoImpl'
	 * 
	 * @param userConn
	 */
	public DegustacionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "degustacion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Degustacion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Degustacion dto = new Degustacion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Degustacion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Degustacion dto = new Degustacion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Degustacion ret[] = new Degustacion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Degustacion dto, ResultSet rs) throws SQLException
	{
		dto.setIdDegustacion( rs.getInt( COLUMN_ID_DEGUSTACION ) );
		dto.setIdUsuario( rs.getInt( COLUMN_ID_USUARIO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioNull( true );
		}
		
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		if (rs.wasNull()) {
			dto.setIdConceptoNull( true );
		}
		
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setIdClienteNull( true );
		}
		
		dto.setIdCheck( rs.getInt( COLUMN_ID_CHECK ) );
		if (rs.wasNull()) {
			dto.setIdCheckNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setCantidad( rs.getDouble( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setCantidadCierre( rs.getDouble( COLUMN_CANTIDAD_CIERRE ) );
		if (rs.wasNull()) {
			dto.setCantidadCierreNull( true );
		}
		
		dto.setComentariosCierre( rs.getString( COLUMN_COMENTARIOS_CIERRE ) );
		dto.setFechaApertura( rs.getTimestamp(COLUMN_FECHA_APERTURA ) );
		dto.setFechaCierre( rs.getTimestamp(COLUMN_FECHA_CIERRE ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Degustacion dto)
	{
		dto.setIdDegustacionModified( false );
		dto.setIdUsuarioModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdConceptoModified( false );
		dto.setIdClienteModified( false );
		dto.setIdCheckModified( false );
		dto.setIdEstatusModified( false );
		dto.setCantidadModified( false );
		dto.setCantidadCierreModified( false );
		dto.setComentariosCierreModified( false );
		dto.setFechaAperturaModified( false );
		dto.setFechaCierreModified( false );
	}

	/** 
	 * Returns all rows from the degustacion table that match the specified arbitrary SQL statement
	 */
	public Degustacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws DegustacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DegustacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the degustacion table that match the specified arbitrary SQL statement
	 */
	public Degustacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws DegustacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DegustacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
