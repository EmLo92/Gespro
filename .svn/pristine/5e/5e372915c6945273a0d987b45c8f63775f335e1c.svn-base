/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.dao;

import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;

public interface EstanteriaDao
{
	/** 
	 * Inserts a new row in the estanteria table.
	 */
	public EstanteriaPk insert(Estanteria dto) throws EstanteriaDaoException;

	/** 
	 * Updates a single row in the estanteria table.
	 */
	public void update(EstanteriaPk pk, Estanteria dto) throws EstanteriaDaoException;

	/** 
	 * Deletes a single row in the estanteria table.
	 */
	public void delete(EstanteriaPk pk) throws EstanteriaDaoException;

	/** 
	 * Returns the rows from the estanteria table that matches the specified primary-key value.
	 */
	public Estanteria findByPrimaryKey(EstanteriaPk pk) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_ESTANTERIA = :idEstanteria'.
	 */
	public Estanteria findByPrimaryKey(int idEstanteria) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria ''.
	 */
	public Estanteria[] findAll() throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_ESTANTERIA = :idEstanteria'.
	 */
	public Estanteria[] findWhereIdEstanteriaEquals(int idEstanteria) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Estanteria[] findWhereIdEmpresaEquals(int idEmpresa) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Estanteria[] findWhereIdEstatusEquals(int idEstatus) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Estanteria[] findWhereIdClienteEquals(int idCliente) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public Estanteria[] findWhereIdConceptoEquals(int idConcepto) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public Estanteria[] findWhereIdUsuarioEquals(int idUsuario) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public Estanteria[] findWhereCantidadEquals(int cantidad) throws EstanteriaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the estanteria table that match the specified arbitrary SQL statement
	 */
	public Estanteria[] findByDynamicSelect(String sql, Object[] sqlParams) throws EstanteriaDaoException;

	/** 
	 * Returns all rows from the estanteria table that match the specified arbitrary SQL statement
	 */
	public Estanteria[] findByDynamicWhere(String sql, Object[] sqlParams) throws EstanteriaDaoException;

}
