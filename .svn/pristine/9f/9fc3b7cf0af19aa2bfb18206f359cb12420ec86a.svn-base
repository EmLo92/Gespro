/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.jdbc;

import com.tsp.gespro.dao.*;
import com.tsp.gespro.factory.*;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class RutaMarcadorDaoImpl extends AbstractDAO implements RutaMarcadorDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_RUTA_MARCADOR, ID_RUTA, INFORMACION_MARCADOR, LATITUD_MARCADOR, LONGITUD_MARCADOR, ID_PROSPECTO, ID_CLIENTE, IS_VISITADO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_RUTA_MARCADOR, ID_RUTA, INFORMACION_MARCADOR, LATITUD_MARCADOR, LONGITUD_MARCADOR, ID_PROSPECTO, ID_CLIENTE, IS_VISITADO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_RUTA_MARCADOR = ?, ID_RUTA = ?, INFORMACION_MARCADOR = ?, LATITUD_MARCADOR = ?, LONGITUD_MARCADOR = ?, ID_PROSPECTO = ?, ID_CLIENTE = ?, IS_VISITADO = ? WHERE ID_RUTA_MARCADOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_RUTA_MARCADOR = ?";

	/** 
	 * Index of column ID_RUTA_MARCADOR
	 */
	protected static final int COLUMN_ID_RUTA_MARCADOR = 1;

	/** 
	 * Index of column ID_RUTA
	 */
	protected static final int COLUMN_ID_RUTA = 2;

	/** 
	 * Index of column INFORMACION_MARCADOR
	 */
	protected static final int COLUMN_INFORMACION_MARCADOR = 3;

	/** 
	 * Index of column LATITUD_MARCADOR
	 */
	protected static final int COLUMN_LATITUD_MARCADOR = 4;

	/** 
	 * Index of column LONGITUD_MARCADOR
	 */
	protected static final int COLUMN_LONGITUD_MARCADOR = 5;

	/** 
	 * Index of column ID_PROSPECTO
	 */
	protected static final int COLUMN_ID_PROSPECTO = 6;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 7;

	/** 
	 * Index of column IS_VISITADO
	 */
	protected static final int COLUMN_IS_VISITADO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column ID_RUTA_MARCADOR
	 */
	protected static final int PK_COLUMN_ID_RUTA_MARCADOR = 1;

	/** 
	 * Inserts a new row in the ruta_marcador table.
	 */
	public RutaMarcadorPk insert(RutaMarcador dto) throws RutaMarcadorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdRutaMarcadorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_RUTA_MARCADOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdRutaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_RUTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isInformacionMarcadorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "INFORMACION_MARCADOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudMarcadorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD_MARCADOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudMarcadorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD_MARCADOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProspectoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PROSPECTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsVisitadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IS_VISITADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdRutaMarcadorModified()) {
				stmt.setDouble( index++, dto.getIdRutaMarcador() );
			}
		
			if (dto.isIdRutaModified()) {
				if (dto.isIdRutaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getIdRuta() );
				}
		
			}
		
			if (dto.isInformacionMarcadorModified()) {
				super.setBlobColumn(stmt, index++, dto.getInformacionMarcador() );
			}
		
			if (dto.isLatitudMarcadorModified()) {
				stmt.setString( index++, dto.getLatitudMarcador() );
			}
		
			if (dto.isLongitudMarcadorModified()) {
				stmt.setString( index++, dto.getLongitudMarcador() );
			}
		
			if (dto.isIdProspectoModified()) {
				if (dto.isIdProspectoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getIdProspecto() );
				}
		
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIsVisitadoModified()) {
				if (dto.isIsVisitadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsVisitado() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdRutaMarcador( rs.getDouble( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RutaMarcadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ruta_marcador table.
	 */
	public void update(RutaMarcadorPk pk, RutaMarcador dto) throws RutaMarcadorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdRutaMarcadorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_RUTA_MARCADOR=?" );
				modified=true;
			}
		
			if (dto.isIdRutaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_RUTA=?" );
				modified=true;
			}
		
			if (dto.isInformacionMarcadorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "INFORMACION_MARCADOR=?" );
				modified=true;
			}
		
			if (dto.isLatitudMarcadorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD_MARCADOR=?" );
				modified=true;
			}
		
			if (dto.isLongitudMarcadorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD_MARCADOR=?" );
				modified=true;
			}
		
			if (dto.isIdProspectoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PROSPECTO=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIsVisitadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IS_VISITADO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_RUTA_MARCADOR=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRutaMarcadorModified()) {
				stmt.setDouble( index++, dto.getIdRutaMarcador() );
			}
		
			if (dto.isIdRutaModified()) {
				if (dto.isIdRutaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getIdRuta() );
				}
		
			}
		
			if (dto.isInformacionMarcadorModified()) {
				super.setBlobColumn(stmt, index++, dto.getInformacionMarcador() );
			}
		
			if (dto.isLatitudMarcadorModified()) {
				stmt.setString( index++, dto.getLatitudMarcador() );
			}
		
			if (dto.isLongitudMarcadorModified()) {
				stmt.setString( index++, dto.getLongitudMarcador() );
			}
		
			if (dto.isIdProspectoModified()) {
				if (dto.isIdProspectoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getIdProspecto() );
				}
		
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIsVisitadoModified()) {
				if (dto.isIsVisitadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsVisitado() );
				}
		
			}
		
			stmt.setDouble( index++, pk.getIdRutaMarcador() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RutaMarcadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ruta_marcador table.
	 */
	public void delete(RutaMarcadorPk pk) throws RutaMarcadorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setDouble( 1, pk.getIdRutaMarcador() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RutaMarcadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ruta_marcador table that matches the specified primary-key value.
	 */
	public RutaMarcador findByPrimaryKey(RutaMarcadorPk pk) throws RutaMarcadorDaoException
	{
		return findByPrimaryKey( pk.getIdRutaMarcador() );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_RUTA_MARCADOR = :idRutaMarcador'.
	 */
	public RutaMarcador findByPrimaryKey(double idRutaMarcador) throws RutaMarcadorDaoException
	{
		RutaMarcador ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_RUTA_MARCADOR = ?", new Object[] {  new Double(idRutaMarcador) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria ''.
	 */
	public RutaMarcador[] findAll() throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_RUTA_MARCADOR", null );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_RUTA_MARCADOR = :idRutaMarcador'.
	 */
	public RutaMarcador[] findWhereIdRutaMarcadorEquals(double idRutaMarcador) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_RUTA_MARCADOR = ? ORDER BY ID_RUTA_MARCADOR", new Object[] {  new Double(idRutaMarcador) } );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_RUTA = :idRuta'.
	 */
	public RutaMarcador[] findWhereIdRutaEquals(double idRuta) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_RUTA = ? ORDER BY ID_RUTA", new Object[] {  new Double(idRuta) } );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'INFORMACION_MARCADOR = :informacionMarcador'.
	 */
	public RutaMarcador[] findWhereInformacionMarcadorEquals(byte[] informacionMarcador) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INFORMACION_MARCADOR = ? ORDER BY INFORMACION_MARCADOR", new Object[] { informacionMarcador } );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'LATITUD_MARCADOR = :latitudMarcador'.
	 */
	public RutaMarcador[] findWhereLatitudMarcadorEquals(String latitudMarcador) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD_MARCADOR = ? ORDER BY LATITUD_MARCADOR", new Object[] { latitudMarcador } );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'LONGITUD_MARCADOR = :longitudMarcador'.
	 */
	public RutaMarcador[] findWhereLongitudMarcadorEquals(String longitudMarcador) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD_MARCADOR = ? ORDER BY LONGITUD_MARCADOR", new Object[] { longitudMarcador } );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_PROSPECTO = :idProspecto'.
	 */
	public RutaMarcador[] findWhereIdProspectoEquals(double idProspecto) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROSPECTO = ? ORDER BY ID_PROSPECTO", new Object[] {  new Double(idProspecto) } );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public RutaMarcador[] findWhereIdClienteEquals(double idCliente) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Double(idCliente) } );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'IS_VISITADO = :isVisitado'.
	 */
	public RutaMarcador[] findWhereIsVisitadoEquals(short isVisitado) throws RutaMarcadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_VISITADO = ? ORDER BY IS_VISITADO", new Object[] {  new Short(isVisitado) } );
	}

	/**
	 * Method 'RutaMarcadorDaoImpl'
	 * 
	 */
	public RutaMarcadorDaoImpl()
	{
	}

	/**
	 * Method 'RutaMarcadorDaoImpl'
	 * 
	 * @param userConn
	 */
	public RutaMarcadorDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "ruta_marcador";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected RutaMarcador fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			RutaMarcador dto = new RutaMarcador();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected RutaMarcador[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			RutaMarcador dto = new RutaMarcador();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		RutaMarcador ret[] = new RutaMarcador[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(RutaMarcador dto, ResultSet rs) throws SQLException
	{
		dto.setIdRutaMarcador( rs.getDouble( COLUMN_ID_RUTA_MARCADOR ) );
		dto.setIdRuta( rs.getDouble( COLUMN_ID_RUTA ) );
		if (rs.wasNull()) {
			dto.setIdRutaNull( true );
		}
		
		dto.setInformacionMarcador( super.getBlobColumn(rs, COLUMN_INFORMACION_MARCADOR ) );
		dto.setLatitudMarcador( rs.getString( COLUMN_LATITUD_MARCADOR ) );
		dto.setLongitudMarcador( rs.getString( COLUMN_LONGITUD_MARCADOR ) );
		dto.setIdProspecto( rs.getDouble( COLUMN_ID_PROSPECTO ) );
		if (rs.wasNull()) {
			dto.setIdProspectoNull( true );
		}
		
		dto.setIdCliente( rs.getDouble( COLUMN_ID_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setIdClienteNull( true );
		}
		
		dto.setIsVisitado( rs.getShort( COLUMN_IS_VISITADO ) );
		if (rs.wasNull()) {
			dto.setIsVisitadoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(RutaMarcador dto)
	{
		dto.setIdRutaMarcadorModified( false );
		dto.setIdRutaModified( false );
		dto.setInformacionMarcadorModified( false );
		dto.setLatitudMarcadorModified( false );
		dto.setLongitudMarcadorModified( false );
		dto.setIdProspectoModified( false );
		dto.setIdClienteModified( false );
		dto.setIsVisitadoModified( false );
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the specified arbitrary SQL statement
	 */
	public RutaMarcador[] findByDynamicSelect(String sql, Object[] sqlParams) throws RutaMarcadorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RutaMarcadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ruta_marcador table that match the specified arbitrary SQL statement
	 */
	public RutaMarcador[] findByDynamicWhere(String sql, Object[] sqlParams) throws RutaMarcadorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RutaMarcadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
