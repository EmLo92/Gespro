/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.tsp.gespro.bo;

import com.tsp.gespro.dto.RelacionConceptoCompetencia;
import com.tsp.gespro.exceptions.RelacionConceptoCompetenciaDaoException;
import com.tsp.gespro.jdbc.RelacionConceptoCompetenciaDaoImpl;
import java.sql.Connection;

/**
 *
 * @author Leonardo
 */
public class RelacionConceptoCompetenciaBO {
    private RelacionConceptoCompetencia relacionConceptoCompetencia = null;

    public RelacionConceptoCompetencia getRelacionConceptoCompetencia() {
        return relacionConceptoCompetencia;
    }

    public void setRelacionConceptoCompetencia(RelacionConceptoCompetencia relacionConceptoCompetencia) {
        this.relacionConceptoCompetencia = relacionConceptoCompetencia;
    }
    
    private Connection conn = null;

    public Connection getConn() {
        return conn;
    }

    public void setConn(Connection conn) {
        this.conn = conn;
    }
    
    public RelacionConceptoCompetenciaBO(Connection conn){
        this.conn = conn;
    }
       
    
    public RelacionConceptoCompetenciaBO(int idRelacionConceptoCompetencia, Connection conn){
        this.conn = conn;
        try{
            RelacionConceptoCompetenciaDaoImpl RelacionConceptoCompetenciaDaoImpl = new RelacionConceptoCompetenciaDaoImpl(this.conn);
            this.relacionConceptoCompetencia = RelacionConceptoCompetenciaDaoImpl.findByPrimaryKey(idRelacionConceptoCompetencia);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public RelacionConceptoCompetencia findRelacionConceptoCompetenciabyId(int idRelacionConceptoCompetencia) throws Exception{
        RelacionConceptoCompetencia RelacionConceptoCompetencia = null;
        
        try{
            RelacionConceptoCompetenciaDaoImpl RelacionConceptoCompetenciaDaoImpl = new RelacionConceptoCompetenciaDaoImpl(this.conn);
            RelacionConceptoCompetencia = RelacionConceptoCompetenciaDaoImpl.findByPrimaryKey(idRelacionConceptoCompetencia);
            if (RelacionConceptoCompetencia==null){
                throw new Exception("No se encontro ningun RelacionConceptoCompetencia que corresponda con los parámetros específicados.");
            }
            if (RelacionConceptoCompetencia.getIdRelacion()<=0){
                throw new Exception("No se encontro ningun RelacionConceptoCompetencia que corresponda con los parámetros específicados.");
            }
        }catch(Exception e){
            throw new Exception("Ocurrió un error inesperado mientras se intentaba recuperar la información del RelacionConceptoCompetencia del usuario. Error: " + e.getMessage());
        }
        
        return RelacionConceptoCompetencia;
    }
    
    /**
     * Realiza una búsqueda por ID RelacionConceptoCompetencia en busca de
     * coincidencias
     * @param idMarca ID Del Usuario para filtrar, -1 para mostrar todos los registros
     * @param idEmpresa ID de la Empresa a filtrar marcas, -1 para evitar filtro
     *  @param minLimit Limite inferior de la paginación (Desde) 0 en caso de no existir limite inferior
     * @param maxLimit Limite superior de la paginación (Hasta) 0 en caso de no existir limite superior
     * @param filtroBusqueda Cadena con un filtro de búsqueda personalizado
     * @return DTO Marca
     */
    public RelacionConceptoCompetencia[] findRelacionConceptoCompetencias(int idRelacionConceptoCompetencia, int idConcepto,int idCompetencia, int minLimit,int maxLimit, String filtroBusqueda) {
        RelacionConceptoCompetencia[] relacionConceptoCompetenciaDto = new RelacionConceptoCompetencia[0];
        RelacionConceptoCompetenciaDaoImpl relacionConceptoCompetenciaDao = new RelacionConceptoCompetenciaDaoImpl(this.conn);
        try {
            String sqlFiltro="";
            if (idRelacionConceptoCompetencia>0){
                sqlFiltro ="ID_RELACION=" + idRelacionConceptoCompetencia + " ";
            }else{
                sqlFiltro ="ID_RELACION>0 ";
            }
            if (idConcepto>0){                
                sqlFiltro += " AND ID_CONCEPTO = " + idConcepto;
            }else{
                sqlFiltro +=" AND ID_CONCEPTO > 0 ";
            }
            
            if (idCompetencia>0){                
                sqlFiltro += " AND ID_COMPETENCIA = " + idCompetencia;
            }else{
                sqlFiltro +=" AND ID_COMPETENCIA > 0 ";
            }
            
            if (!filtroBusqueda.trim().equals("")){
                sqlFiltro += filtroBusqueda;
            }
            
            if (minLimit<0)
                minLimit=0;
            
            String sqlLimit="";
            if ((minLimit>0 && maxLimit>0) || (minLimit==0 && maxLimit>0))
                sqlLimit = " LIMIT " + minLimit + "," + maxLimit;
            
            relacionConceptoCompetenciaDto = relacionConceptoCompetenciaDao.findByDynamicWhere( 
                    sqlFiltro
                    + " ORDER BY ID_RELACION ASC"
                    + sqlLimit
                    , new Object[0]);
            
        } catch (Exception ex) {
            System.out.println("Error de consulta a Base de Datos: " + ex.toString());
            ex.printStackTrace();
        }
        
        return relacionConceptoCompetenciaDto;
    }
    
}
    

