/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tsp.gespro.bo;

import com.tsp.gespro.config.Configuration;
import com.tsp.gespro.dto.Concepto;
//import com.tsp.gespro.dto.Empleado;
//import com.tsp.gespro.dto.EmpleadoInventarioRepartidor;
import com.tsp.gespro.dto.EmpresaPermisoAplicacion;
import com.tsp.gespro.dto.Marca;
import com.tsp.gespro.dto.MovilMensaje;
import com.tsp.gespro.dto.Usuarios;
import com.tsp.gespro.exceptions.ConceptoDaoException;
import com.tsp.gespro.jdbc.ConceptoDaoImpl;
import com.tsp.gespro.jdbc.EmpresaPermisoAplicacionDaoImpl;
import com.tsp.gespro.jdbc.MarcaDaoImpl;
import com.tsp.gespro.jdbc.MovilMensajeDaoImpl;
import com.tsp.gespro.mail.TspMailBO;
import com.tsp.gespro.util.DateManage;
import com.tsp.gespro.util.Encrypter;
import com.tsp.gespro.util.GenericValidator;
import com.tsp.gespro.util.StringManage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ISCesarMartinez
 */
public class ConceptoBO {
    
    private Concepto concepto = null;

    public Concepto getConcepto() {
        return concepto;
    }

    public void setConcepto(Concepto concepto) {
        this.concepto = concepto;
    }
        
    private Connection conn = null;

    public Connection getConn() {
        return conn;
    }

    public void setConn(Connection conn) {
        this.conn = conn;
    }
    
    public ConceptoBO(Connection conn){
        this.conn = conn;
    }
    
     public ConceptoBO(int idConcepto, Connection conn){ 
        this.conn = conn;
        try{
            ConceptoDaoImpl ConceptoDaoImpl = new ConceptoDaoImpl(this.conn);
            this.concepto = ConceptoDaoImpl.findByPrimaryKey(idConcepto);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public Concepto findConceptobyId(int idConcepto) throws Exception{
        Concepto concepto = null;
        
        try{            
            ConceptoDaoImpl conceptoDaoImpl = new ConceptoDaoImpl(this.conn);
            concepto = conceptoDaoImpl.findByPrimaryKey(idConcepto);
            if (concepto==null){
                throw new Exception("No se encontro ningun Concepto que corresponda con los parámetros específicados.");
            }
            if (concepto.getIdConcepto()<=0){
                throw new Exception("No se encontro ningun Concepto que corresponda con los parámetros específicados.");
            }
        }catch(ConceptoDaoException e){
            throw new Exception("Ocurrió un error inesperado mientras se intentaba recuperar la información de Concepto del usuario. Error: " + e.getMessage());
        }
        
        return concepto;
    }
    
    public Concepto getConceptoGenericoByEmpresa(int idEmpresa) throws Exception{
        Concepto Concepto = null;
        
        try{
            ConceptoDaoImpl ConceptoDaoImpl = new ConceptoDaoImpl(this.conn);
            //Concepto = ConceptoDaoImpl.findByDynamicWhere("ID_EMPRESA=" +idEmpresa + " AND GENERICO = 1", new Object[0])[0];
            
            Configuration appConfig = new Configuration();
            int idConceptoGenericoApp = Integer.parseInt(appConfig.getBd_sct_idconceptogenerico());
            Concepto = ConceptoDaoImpl.findByDynamicWhere("ID_CONCEPTO=" + idConceptoGenericoApp, new Object[0])[0];
            
            if (Concepto==null){
                throw new Exception("La empresa no tiene creado un producto Génerico");
            }
        }catch(ConceptoDaoException e){
            e.printStackTrace();
            throw new Exception("La empresa no tiene creado un producto Génerico");
        }
        
        return Concepto;
    }

/*    public void updateBD(Concepto concepto){
        //Checamos primero si se ha alcanzado el stock minimo
        if (concepto !=null){
            double stockNuevo = concepto.getNumArticulosDisponibles();
            double stockMinimo = concepto.getStockMinimo();
            if (concepto.getStockAvisoMin()==(short)1){
                if (stockNuevo<=stockMinimo)
                    this.enviaCorreoNotificacionStockMinimo(concepto);
            }
        }
        try{
            new ConceptoDaoImpl(this.conn).update(concepto.createPk(), concepto);
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
*/
    
    /**
     * Realiza una búsqueda por ID Concepto y otros filtros en busca de
     * coincidencias
     * @param idConcepto ID Del Concepto para filtrar, -1 para mostrar todos los registros
     * @param idEmpresa ID de la Empresa a filtrar marcas, -1 para evitar filtro
     *  @param minLimit Limite inferior de la paginación (Desde) 0 en caso de no existir limite inferior
     * @param maxLimit Limite superior de la paginación (Hasta) 0 en caso de no existir limite superior
     * @param filtroBusqueda Cadena con un filtro de búsqueda personalizado
     * @return DTO Marca
     */
    public Concepto[] findConceptos(int idConcepto, int idEmpresa, int minLimit,int maxLimit, String filtroBusqueda) {
        Concepto[] conceptoDto = new Concepto[0];
        ConceptoDaoImpl conceptoDao = new ConceptoDaoImpl(this.conn);
        try {
            String sqlFiltro="";
            if (idConcepto>0){
                sqlFiltro ="ID_CONCEPTO=" + idConcepto + " AND ";
            }else{
                sqlFiltro ="ID_CONCEPTO>0 AND";
            }
            if (idEmpresa>0){                
                sqlFiltro += " ID_EMPRESA IN (SELECT ID_EMPRESA FROM EMPRESA WHERE ID_EMPRESA_PADRE = " + idEmpresa + " OR ID_EMPRESA= " + idEmpresa + ")";
            }else{
                sqlFiltro +=" ID_EMPRESA>0";
            }
            
            if (!filtroBusqueda.trim().equals("")){
                sqlFiltro += filtroBusqueda;
            }
            
            if (minLimit<0)
                minLimit=0;
            
            String sqlLimit="";
            if ((minLimit>0 && maxLimit>0) || (minLimit==0 && maxLimit>0))
                sqlLimit = " LIMIT " + minLimit + "," + maxLimit;
            
            conceptoDto = conceptoDao.findByDynamicWhere( 
                    sqlFiltro
                   // + " ORDER BY NOMBRE ASC"
                    + sqlLimit
                    , new Object[0]);
            
        } catch (Exception ex) {
            System.out.println("Error de consulta a Base de Datos: " + ex.toString());
            ex.printStackTrace();
        }
        
        return conceptoDto;
    }
    
    /**
     * Busca el numero de coincidencias por ID Concepto y otros filtros
     * @param idConcepto ID Del Concepto para filtrar, -1 para mostrar todos los registros
     * @param idEmpresa ID de la Empresa a filtrar marcas, -1 para evitar filtro
     * @param minLimit Limite inferior de la paginación (Desde) 0 en caso de no existir limite inferior
     * @param maxLimit Limite superior de la paginación (Hasta) 0 en caso de no existir limite superior
     * @param filtroBusqueda Cadena con un filtro de búsqueda personalizado
     * @return DTO Marca
     */
    public int findCantidadConceptos(int idConcepto, int idEmpresa, int minLimit,int maxLimit, String filtroBusqueda) {
        int cantidad = 0;
        try {
            String sqlFiltro="";
            if (idConcepto>0){
                sqlFiltro ="ID_CONCEPTO=" + idConcepto + " AND ";
            }else{
                sqlFiltro ="ID_CONCEPTO>0 AND";
            }
            if (idEmpresa>0){                
                sqlFiltro += " ID_EMPRESA IN (SELECT ID_EMPRESA FROM EMPRESA WHERE ID_EMPRESA_PADRE = " + idEmpresa + " OR ID_EMPRESA= " + idEmpresa + ")";
            }else{
                sqlFiltro +=" ID_EMPRESA>0";
            }
            
            if (!filtroBusqueda.trim().equals("")){
                sqlFiltro += filtroBusqueda;
            }
            
            if (minLimit<0)
                minLimit=0;
            
            String sqlLimit="";
            if ((minLimit>0 && maxLimit>0) || (minLimit==0 && maxLimit>0))
                sqlLimit = " LIMIT " + minLimit + "," + maxLimit;
            
            Statement stmt = this.conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT COUNT(ID_CONCEPTO) as cantidad FROM CONCEPTO WHERE " + 
                    sqlFiltro
                   // + " ORDER BY NOMBRE ASC"
                    + sqlLimit);
            if(rs.next()){
                cantidad = rs.getInt("cantidad");
            }
            
        } catch (Exception ex) {
            System.out.println("Error de consulta a Base de Datos: " + ex.toString());
            ex.printStackTrace();
        }
        
        return cantidad;
    }
    
    public String getConceptosByIdHTMLCombo(int idEmpresa, int idSeleccionado){
        String strHTMLCombo ="";
        Encrypter encripDesencri = new Encrypter();
        ConceptoBO conceptoBO = new ConceptoBO(this.conn);
        ExistenciaAlmacenBO exisAlmBO = new ExistenciaAlmacenBO(this.conn);
        double stockGral = 0;
        try{
            Concepto[] conceptosDto = findConceptos(-1, idEmpresa, 0, 0, " AND ID_ESTATUS!=2 ");
            
            for (Concepto concepto:conceptosDto){
                try{
                    stockGral = 0;
                    stockGral = exisAlmBO.getExistenciaGeneralByEmpresaProducto(concepto.getIdEmpresa(), concepto.getIdConcepto());
                    
                    //Categoria datosCategoria = new CategoriaDaoImpl(this.conn).findByPrimaryKey(categoria.getIdCategoria());
                    String selectedStr="";

                    if (idSeleccionado==concepto.getIdConcepto())
                        selectedStr = " selected ";

                    strHTMLCombo += "<option value='"+concepto.getIdConcepto()+"' "
                            + selectedStr
                            + "title='"+"Disponibles: "+(stockGral)+"\nDescripción: "+concepto.getDescripcion()+"'>"
                            + encripDesencri.decodeString(concepto.getNombre())
                            +"</option>";
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }

        return strHTMLCombo;
    }
    
    public String getConceptosByIdHTMLCombo(int idEmpresa){
        String strHTMLCombo ="";
        Encrypter encripDesencri = new Encrypter();

        try{
            Concepto[] conceptosDto = findConceptos(-1, idEmpresa, 0, 0, " AND ID_ESTATUS!=2 ");
            
            for (Concepto concepto:conceptosDto){
                try{
                    //Categoria datosCategoria = new CategoriaDaoImpl().findByPrimaryKey(categoria.getIdCategoria());
                    String selectedStr="";

                    //if (idSeleccionado==concepto.getIdConcepto())
                    //    selectedStr = " selected ";

                    strHTMLCombo += "<option value='"+concepto.getIdConcepto()+"' "
                            + selectedStr
                            + "title='"+encripDesencri.decodeString(concepto.getNombre())+"'>"
                            + encripDesencri.decodeString(concepto.getNombre())
                            +"</option>";
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }

        return strHTMLCombo;
    }
    
    public String getConceptoByIdEspecificoHTMLCombo(int idEmpresa, int idSeleccionado){
        String strHTMLCombo ="";
        Encrypter encripDesencri = new Encrypter();
        ExistenciaAlmacenBO exisAlmBO = new ExistenciaAlmacenBO(this.conn);
        double stockGral = 0;

        try{
            Concepto conceptosDto = findConceptobyId(idSeleccionado);
            
            
                try{
                    
                    stockGral = 0;
                    stockGral = exisAlmBO.getExistenciaGeneralByEmpresaProducto(concepto.getIdEmpresa(), concepto.getIdConcepto());
                    
                    //Categoria datosCategoria = new CategoriaDaoImpl(this.conn).findByPrimaryKey(categoria.getIdCategoria());
                    String selectedStr="";

                    if (idSeleccionado==conceptosDto.getIdConcepto())
                        selectedStr = " selected ";

                    strHTMLCombo += "<option value='"+conceptosDto.getIdConcepto()+"' "
                            + selectedStr
                            + "title='"+"Disponibles: "+(stockGral)+"\nDescricion: "+conceptosDto.getDescripcion()+"'>"
                            + encripDesencri.decodeString(conceptosDto.getNombre())
                            +"</option>";
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            
        }catch(Exception e){
            e.printStackTrace();
        }

        return strHTMLCombo;
    }
    
    public String getNombreConceptoLegible(){
        String nombre = "";
        try{
            nombre = desencripta(this.concepto.getNombre());
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return nombre;
    }
    
    public String encripta(String dato) throws IOException{
         Encrypter encripter = new Encrypter();
         return encripter.encodeString2(dato);        
    }
    
    public String desencripta(String dato) throws IOException{
         Encrypter desencripta = new Encrypter();
         return desencripta.decodeString(dato);        
    }
    
/*    public boolean enviaCorreoNotificacionStockMinimo(Concepto conceptoDto){
         //Validamos si es cliente de EVC
        int idEmpresa = conceptoDto.getIdEmpresa();
        EmpresaPermisoAplicacion empresaPermisoDto = null;
        ConceptoBO conceptoBO = new ConceptoBO(this.conn);
        ExistenciaAlmacenBO exisAlmBO = new ExistenciaAlmacenBO(this.conn);
        double stockGral = 0;
        
        try{
            EmpresaPermisoAplicacionDaoImpl  empresaPermisoDao = new EmpresaPermisoAplicacionDaoImpl();
            empresaPermisoDto = empresaPermisoDao.findWhereIdEmpresaEquals(idEmpresa)[0];
        }catch(Exception e){e.printStackTrace();}
        
        boolean enviado = false;
        
        if (conceptoDto!=null){
            try {
                TspMailBO mailBO = new TspMailBO();
                
                if(empresaPermisoDto.getAccesoSgfensPretomovil()==1){
                    mailBO.setConfigurationMovilpyme();
                } else{
                    mailBO.setConfiguration();              
                }
                
                
                GenericValidator genericValidator = new GenericValidator();
                
                ArrayList<String> destinatarios = new ArrayList<String>();
                String nombreProducto = this.desencripta(conceptoDto.getNombre());
                
                
                
                try{
                    UsuarioBO usuariosBO = new UsuarioBO();
                    Usuarios[] desarrolladores = usuariosBO.findUsuariosByRol(conceptoDto.getIdEmpresa(), RolesBO.ROL_DESARROLLO);
                    Usuarios[] administradores = usuariosBO.findUsuariosByRol(conceptoDto.getIdEmpresa(), RolesBO.ROL_ADMINISTRADOR);
                    
                    for (Usuarios usuario:desarrolladores){
                        UsuarioBO usuarioBO = new UsuarioBO(usuario.getIdUsuarios());
                        try{destinatarios.add(usuarioBO.getDatosUsuario().getCorreo());}catch(Exception ex){}
                    }
                    for (Usuarios usuario:administradores){
                        UsuarioBO usuarioBO = new UsuarioBO(usuario.getIdUsuarios());
                        try{destinatarios.add(usuarioBO.getDatosUsuario().getCorreo());}catch(Exception ex){}
                    }
                }catch(Exception ex){
                    ex.printStackTrace();
                }
                
                //Agregamos todos los correos de los usuarios Cuentas Por Pagar
                for (String destinatario : destinatarios){
                    try{                           
                        if(genericValidator.isEmail(destinatario)){
                            try{
                                mailBO.addTo(destinatario, "Administradores");
                            }catch(Exception ex){}
                        }
                    }catch(Exception ex){}
                }
                
                try{
                    //Obtenemos existencia general
                    stockGral = exisAlmBO.getExistenciaGeneralByEmpresaProducto(conceptoDto.getIdEmpresa(), conceptoDto.getIdConcepto());
                }catch(Exception e){}
                
                String msg = "<b>Buen día!</b><br/> "
                            + "<br/> El producto <b>'" + nombreProducto + "'</b> presenta desabasto."
                            + "<br/> ID producto: <i>"+conceptoDto.getIdConcepto()+"</i>"
                            + "<br/> SKU/Identificación: <i>"+conceptoDto.getIdentificacion()+"</i>"
                            + "<br/> Descripción: <i>"+conceptoDto.getDescripcion()+"</i>"
                            + "<br/> Stock mínimo: <i>"+conceptoDto.getStockMinimo()+"</i>"
                            + "<br/> Stock actual: <i>"+stockGral+"</i>";
                
                if(empresaPermisoDto.getAccesoSgfensPretomovil()==1){
                    mailBO.addMessageMovilpyme(msg ,1);
                } else{
                    mailBO.addMessage(msg ,1);
                 }
                
                mailBO.send("IMPORTANTE Stock Mínimo de producto alcanzado");
                
                enviado = true;
            } catch (Exception ex) {
                enviado = false;
                System.out.print("Ocurrio un error al intentar enviar el correo: " + ex.toString());
                ex.printStackTrace();
            }            
        }
        
        return enviado;
    }
    
*/    
    
    public Concepto[] conceptoDesencriptarNombre(Concepto[] conceptosDto){        
        for (Concepto item : conceptosDto){
            try {           
                item.setNombre(desencripta(item.getNombre()));} catch (Exception ex) {}
        }  
        return conceptosDto;
    }
    
    public Concepto[] conceptoOrdenaListaEnBaseNombre(Concepto[] conceptosDto){
        java.util.Arrays.sort(conceptosDto);
        return conceptosDto;
    }
    
    
    public String getConceptosByIdHTMLComboReload(int idEmpresa, int idSeleccionado, int minLimit , int maxLimit , String nombreConcepto){
        String strHTMLCombo ="";
        Encrypter encripDesencri = new Encrypter();
        ConceptoBO conceptoBO = new ConceptoBO(this.conn);
        ExistenciaAlmacenBO exisAlmBO = new ExistenciaAlmacenBO(this.conn);
        double stockGral = 0;
        try{
            Concepto[] conceptosDto = findConceptos(-1, idEmpresa, minLimit, maxLimit, " AND ID_ESTATUS!=2 AND  (NOMBRE_DESENCRIPTADO LIKE '%" + nombreConcepto + "%' "
                    + " OR CLAVE LIKE '%" + nombreConcepto + "%' OR IDENTIFICACION LIKE '%" + nombreConcepto + "%' OR ID_MARCA IN(SELECT ID_MARCA FROM MARCA WHERE NOMBRE LIKE '%" + nombreConcepto + "%') ) ");
            if(conceptosDto.length<=0){
                conceptosDto = findConceptos(-1, idEmpresa, minLimit, maxLimit, " AND ID_ESTATUS!=2 ");
            }
            String marca = "";
            MarcaDaoImpl marcaDao = new MarcaDaoImpl();
            for (Concepto concepto:conceptosDto){
                try{
                    marca = "";
                    stockGral = 0;
                    stockGral = exisAlmBO.getExistenciaGeneralByEmpresaProducto(concepto.getIdEmpresa(), concepto.getIdConcepto());
                    try{
                        marca =  marcaDao.findByPrimaryKey(concepto.getIdMarca()).getNombre();
                    }catch(Exception e){}
                    //Categoria datosCategoria = new CategoriaDaoImpl(this.conn).findByPrimaryKey(categoria.getIdCategoria());
                    String selectedStr="";

                    if (idSeleccionado==concepto.getIdConcepto())
                        selectedStr = " selected ";

                    strHTMLCombo += "<option value='"+concepto.getIdConcepto()+"' "
                            + selectedStr
                            + "title='"+"Disponibles: "+(stockGral)+"\nDescripción: "+concepto.getDescripcion()+"'>"
                            + encripDesencri.decodeString(concepto.getNombre());
                            if(!concepto.getClave().equals("") && concepto.getClave()!=null){
                                strHTMLCombo += " , " + concepto.getClave();
                            }
                            if(!marca.equals("")){
                                strHTMLCombo += " , " + marca;
                            }           
                            strHTMLCombo += "</option>";
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }

        return strHTMLCombo;
    }
    
    public String getConceptosGranelByIdHTMLComboReload(int idEmpresa, int idSeleccionado, int minLimit , int maxLimit , String nombreConcepto, String filtro){
        String strHTMLCombo ="";
        Encrypter encripDesencri = new Encrypter();
        ConceptoBO conceptoBO = new ConceptoBO(this.conn);
        ExistenciaAlmacenBO exisAlmBO = new ExistenciaAlmacenBO(this.conn);
        double stockGral = 0;
        try{
            Concepto[] conceptosDto = findConceptos(-1, idEmpresa, minLimit, maxLimit, " AND ID_ESTATUS!=2 AND  (NOMBRE_DESENCRIPTADO LIKE '%" + nombreConcepto + "%' "
                    + " OR CLAVE LIKE '%" + nombreConcepto + "%' OR IDENTIFICACION LIKE '%" + nombreConcepto + "%' OR ID_MARCA IN(SELECT ID_MARCA FROM MARCA WHERE NOMBRE LIKE '%" + nombreConcepto + "%') ) " + filtro);
            if(conceptosDto.length<=0){
                conceptosDto = findConceptos(-1, idEmpresa, minLimit, maxLimit, " AND ID_ESTATUS!=2 ");
            }
            String marca = "";
            MarcaDaoImpl marcaDao = new MarcaDaoImpl();
            for (Concepto concepto:conceptosDto){
                try{
                    marca = "";
                    stockGral = 0;
                    stockGral = exisAlmBO.getExistenciaGeneralByEmpresaProducto(concepto.getIdEmpresa(), concepto.getIdConcepto());
                    try{
                        marca =  marcaDao.findByPrimaryKey(concepto.getIdMarca()).getNombre();
                    }catch(Exception e){}
                    //Categoria datosCategoria = new CategoriaDaoImpl(this.conn).findByPrimaryKey(categoria.getIdCategoria());
                    String selectedStr="";

                    if (idSeleccionado==concepto.getIdConcepto())
                        selectedStr = " selected ";

                    strHTMLCombo += "<option value='"+concepto.getIdConcepto()+"' "
                            + selectedStr
                            + "title='"+"Disponibles: "+(stockGral)+"\nDescripción: "+concepto.getDescripcion()+"'>"
                            + encripDesencri.decodeString(concepto.getNombre());
                            if(!concepto.getClave().equals("") && concepto.getClave()!=null){
                                strHTMLCombo += " , " + concepto.getClave();
                            }
                            if(!marca.equals("")){
                                strHTMLCombo += " , " + marca;
                            }           
                            strHTMLCombo += "</option>";
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }

        return strHTMLCombo;
    }
    
    
    public String getConceptoByIdEspecificoHTMLComboReload(int idEmpresa, int idSeleccionado){
        String strHTMLCombo ="";
        Encrypter encripDesencri = new Encrypter();
        ExistenciaAlmacenBO exisAlmBO = new ExistenciaAlmacenBO(this.conn);
        double stockGral = 0;
        String marca = "";
        MarcaDaoImpl marcaDao = new MarcaDaoImpl();

        try{
            Concepto conceptosDto = findConceptobyId(idSeleccionado);
            
            
                try{
                    marca = "";
                    stockGral = 0;
                    stockGral = exisAlmBO.getExistenciaGeneralByEmpresaProducto(conceptosDto.getIdEmpresa(), conceptosDto.getIdConcepto());
                    
                    try{
                        marca =  marcaDao.findByPrimaryKey(conceptosDto.getIdMarca()).getNombre();
                    }catch(Exception e){}
                    
                    //Categoria datosCategoria = new CategoriaDaoImpl(this.conn).findByPrimaryKey(categoria.getIdCategoria());
                    String selectedStr="";

                    if (idSeleccionado==conceptosDto.getIdConcepto())
                        selectedStr = " selected ";

                    strHTMLCombo += "<option value='"+conceptosDto.getIdConcepto()+"' "
                            + selectedStr
                            + "title='"+"Disponibles: "+(stockGral)+"\nDescripción: "+conceptosDto.getDescripcion()+"'>"
                            + encripDesencri.decodeString(conceptosDto.getNombre());
                            if(!conceptosDto.getClave().equals("") && conceptosDto.getClave()!=null){
                                strHTMLCombo += " , " + conceptosDto.getClave();
                            }
                            if(!marca.equals("")){
                                strHTMLCombo += " , " + marca;
                            }           
                            strHTMLCombo += "</option>";
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            
        }catch(Exception e){
            e.printStackTrace();
        }

        return strHTMLCombo;
    }
    
    /**
    * Genera un folio con los siguientes parametros:
    * 
    * letras CON, id_empresa a 3 dígitos, 1 guion, "CON" (de Consola), 1 guion, l número d folio
    * de acuerdo a fecha y hora
    * 
    * p. ejem:  CON001-CON-20130131100101111
    * 
    * @param idEmpresa
    * @param idEmpleado
    * @return
    */
    public static String generaFolioMovil(int idEmpresa){
        String folio;
        String empresa = StringManage.getExactString(""+idEmpresa, 3, '0', StringManage.FILL_DIRECTION_LEFT);

        try{Thread.sleep(100);}catch(Exception ex){}
        String folioConsecutivo = DateManage.getDateHourString();

        folio = "CON" + empresa + "-CON-" + folioConsecutivo;

        return folio;
    }
            
    
    public String getConceptosByIdHTMLCombo(int idEmpresa, int idSeleccionado , int minLimit , int maxLimit , String filtro){
        String strHTMLCombo ="";
        Encrypter encripDesencri = new Encrypter();
        ConceptoBO conceptoBO = new ConceptoBO(this.conn);
        ExistenciaAlmacenBO exisAlmBO = new ExistenciaAlmacenBO(this.conn);
        double stockGral = 0;
        try{
            Concepto[] conceptosDto = findConceptos(-1, idEmpresa, minLimit, maxLimit, " AND ID_ESTATUS!=2 " + filtro );
            
            for (Concepto concepto:conceptosDto){
                try{
                    stockGral = 0;
                    stockGral = exisAlmBO.getExistenciaGeneralByEmpresaProducto(concepto.getIdEmpresa(), concepto.getIdConcepto());
                    
                    //Categoria datosCategoria = new CategoriaDaoImpl(this.conn).findByPrimaryKey(categoria.getIdCategoria());
                    String selectedStr="";

                    if (idSeleccionado==concepto.getIdConcepto())
                        selectedStr = " selected ";

                    strHTMLCombo += "<option value='"+concepto.getIdConcepto()+"' "
                            + selectedStr
                            + "title='"+"Disponibles: "+(stockGral)+"\nDescripción: "+concepto.getDescripcion()+"'>"
                            + concepto.getNombreDesencriptado()
                            +"</option>";
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }

        return strHTMLCombo;
    }
    
    
/*    public boolean enviaNotificacionStockMinimoSincronizaPedido(Concepto conceptoDto, Empleado empleadoDto){
         //Validamos si es clienete de EVC
        int idEmpresa = conceptoDto.getIdEmpresa();
        EmpresaPermisoAplicacion empresaPermisoDto = null;
        ConceptoBO conceptoBO = new ConceptoBO(this.conn);
        EmpleadoInventarioRepartidorBO emInventarioRepartidorBO = new EmpleadoInventarioRepartidorBO(this.conn);
        EmpleadoInventarioRepartidor emInventarioRepartidorDto = null;
        
        try{
            EmpresaPermisoAplicacionDaoImpl  empresaPermisoDao = new EmpresaPermisoAplicacionDaoImpl();
            empresaPermisoDto = empresaPermisoDao.findWhereIdEmpresaEquals(idEmpresa)[0];
        }catch(Exception e){e.printStackTrace();}
        
        boolean enviado = false;
        
        if (conceptoDto!=null){
            try {
                TspMailBO mailBO = new TspMailBO();
                
                if(empresaPermisoDto.getAccesoSgfensPretomovil()==1){
                    mailBO.setConfigurationMovilpyme();
                } else{
                    mailBO.setConfiguration();              
                }
                
                
                GenericValidator genericValidator = new GenericValidator();
                
                ArrayList<String> destinatarios = new ArrayList<String>();
                String nombreProducto = this.desencripta(conceptoDto.getNombre());
                
                
                
                try{
                    UsuariosBO usuariosBO = new UsuariosBO();
                    Usuarios[] desarrolladores = usuariosBO.findUsuariosByRol(conceptoDto.getIdEmpresa(), RolesBO.ROL_DESARROLLO);
                    Usuarios[] administradores = usuariosBO.findUsuariosByRol(conceptoDto.getIdEmpresa(), RolesBO.ROL_ADMINISTRADOR);
                    
                    for (Usuarios usuario:desarrolladores){
                        UsuarioBO usuarioBO = new UsuarioBO(usuario.getIdUsuarios());
                        try{destinatarios.add(usuarioBO.getLdap().getEmail());}catch(Exception ex){}
                    }
                    for (Usuarios usuario:administradores){
                        UsuarioBO usuarioBO = new UsuarioBO(usuario.getIdUsuarios());
                        try{destinatarios.add(usuarioBO.getLdap().getEmail());}catch(Exception ex){}
                    }
                }catch(Exception ex){
                    ex.printStackTrace();
                }
                
                //Agregamos todos los correos de los usuarios Cuentas Por Pagar
                for (String destinatario : destinatarios){
                    try{                           
                        if(genericValidator.isEmail(destinatario)){
                            try{
                                mailBO.addTo(destinatario, "Administradores");
                            }catch(Exception ex){}
                        }
                    }catch(Exception ex){}
                }
                
                try{
                    //Obtenemos existencia 
                    emInventarioRepartidorDto = emInventarioRepartidorBO.findEmpleadoInventarioRepartidors(-1, empleadoDto.getIdEmpleado(), 0, 0, " AND ID_CONCEPTO = " + conceptoDto.getIdConcepto())[0];
                    
                }catch(Exception e){}
                
                String msg = "<b>Buen día!</b><br/> "
                            + "<br/> El producto <b>'" + nombreProducto + "'</b> presenta desabasto en el Inventario Asignado al Vendedor."
                            + "<br/> ID producto: <i>"+conceptoDto.getIdConcepto()+"</i>"
                            + "<br/> SKU/Identificación: <i>"+conceptoDto.getIdentificacion()+"</i>"
                            + "<br/> Descripción: <i>"+conceptoDto.getDescripcion()+"</i>"                           
                            + "<br/> Stock actual del Vendedor: <i>"+ (emInventarioRepartidorDto!=null?emInventarioRepartidorDto.getCantidad():0) +"</i>";
                
                if(empresaPermisoDto.getAccesoSgfensPretomovil()==1){
                    mailBO.addMessageMovilpyme(msg ,1);
                } else{
                    mailBO.addMessage(msg ,1);
                 }
                
                mailBO.send("IMPORTANTE Stock insuficiente de producto asignado al Vendedor");
                
                enviado = true;
                
                
                //Envia msj a consola y user por chat
                
                try{                

                    /**
                     * Creamos el registro de MovilMensaje
                     */
/*                    MovilMensaje mMovilMensajeDto = new MovilMensaje();
                    MovilMensajeDaoImpl mMovilMensajesDaoImpl = new MovilMensajeDaoImpl(this.conn);


                    //Empleado
                    mMovilMensajeDto.setEmisorTipo(2);
                    mMovilMensajeDto.setIdEmpleadoEmisor(0);
                    mMovilMensajeDto.setReceptorTipo(1);
                    mMovilMensajeDto.setIdEmpleadoReceptor(empleadoDto.getIdEmpleado());
                    mMovilMensajeDto.setFechaEmision(new Date());
                    mMovilMensajeDto.setFechaRecepcion(null);
                    mMovilMensajeDto.setMensaje("No cuentas con la cantidad suficiente de producto '" + nombreProducto +"' asignado en consola para sincronizar pedidos. Consulte a su Administrador.");
                    mMovilMensajeDto.setRecibido(0);
                    /**
                     * Realizamos el insert
                     */
/*                    mMovilMensajesDaoImpl.insert(mMovilMensajeDto);
                
                    //Consola
                    mMovilMensajeDto = new MovilMensaje();
                   
                    mMovilMensajeDto.setEmisorTipo(2);
                    mMovilMensajeDto.setIdEmpleadoEmisor(0);
                    mMovilMensajeDto.setReceptorTipo(2);
                    mMovilMensajeDto.setIdEmpleadoReceptor(0);
                    mMovilMensajeDto.setFechaEmision(new Date());
                    mMovilMensajeDto.setFechaRecepcion(null);
                    mMovilMensajeDto.setMensaje("El vendedor "+ empleadoDto.getNombre() +" " +empleadoDto.getApellidoPaterno() + " " + empleadoDto.getApellidoMaterno()
                            + " no cuenta con la cantidad suficiente de producto '" + nombreProducto +"' asignado en consola para sincronizar pedidos.");
                    mMovilMensajeDto.setRecibido(0);
                    
                    
                    mMovilMensajesDaoImpl.insert(mMovilMensajeDto);

                }catch(Exception e){
                    e.printStackTrace();
                   
                }               
                
                
                
            } catch (Exception ex) {
                enviado = false;
                System.out.print("Ocurrio un error al intentar enviar el correo: " + ex.toString());
                ex.printStackTrace();
            }            
        }
        
        return enviado;
    }
*/    
    
    public Concepto getConceptoByNombre(long idEmpresa, String nombre) throws Exception{
        Concepto Concepto = null;
        
        
        try{
            ConceptoDaoImpl ConceptoDaoImpl = new ConceptoDaoImpl(this.conn);   
            
            Concepto = ConceptoDaoImpl.findByDynamicWhere(" NOMBRE_DESENCRIPTADO ='" + nombre + "' OR NOMBRE ='"+ encripta(nombre)+"' AND "
                    + " ID_EMPRESA IN (SELECT ID_EMPRESA FROM EMPRESA WHERE ID_EMPRESA_PADRE = " + idEmpresa + " OR ID_EMPRESA= " + idEmpresa + ")", new Object[0])[0];
            
            if (Concepto==null){
                throw new Exception("La empresa no tiene creado un producto con los datos especificados");
            }
        }catch(ConceptoDaoException e){
            //e.printStackTrace();
            throw new Exception("La empresa no tiene creado un producto con los datos especificados");
        }
        
        return Concepto;
    }
    
}
